
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function assign(tar, src) {
        // @ts-ignore
        for (const k in src)
            tar[k] = src[k];
        return tar;
    }
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }
    function set_store_value(store, ret, value = ret) {
        store.set(value);
        return ret;
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    // Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM
    // at the end of hydration without touching the remaining nodes.
    let is_hydrating = false;
    function start_hydrating() {
        is_hydrating = true;
    }
    function end_hydrating() {
        is_hydrating = false;
    }
    function upper_bound(low, high, key, value) {
        // Return first index of value larger than input value in the range [low, high)
        while (low < high) {
            const mid = low + ((high - low) >> 1);
            if (key(mid) <= value) {
                low = mid + 1;
            }
            else {
                high = mid;
            }
        }
        return low;
    }
    function init_hydrate(target) {
        if (target.hydrate_init)
            return;
        target.hydrate_init = true;
        // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>
        let children = target.childNodes;
        // If target is <head>, there may be children without claim_order
        if (target.nodeName === 'HEAD') {
            const myChildren = [];
            for (let i = 0; i < children.length; i++) {
                const node = children[i];
                if (node.claim_order !== undefined) {
                    myChildren.push(node);
                }
            }
            children = myChildren;
        }
        /*
        * Reorder claimed children optimally.
        * We can reorder claimed children optimally by finding the longest subsequence of
        * nodes that are already claimed in order and only moving the rest. The longest
        * subsequence subsequence of nodes that are claimed in order can be found by
        * computing the longest increasing subsequence of .claim_order values.
        *
        * This algorithm is optimal in generating the least amount of reorder operations
        * possible.
        *
        * Proof:
        * We know that, given a set of reordering operations, the nodes that do not move
        * always form an increasing subsequence, since they do not move among each other
        * meaning that they must be already ordered among each other. Thus, the maximal
        * set of nodes that do not move form a longest increasing subsequence.
        */
        // Compute longest increasing subsequence
        // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j
        const m = new Int32Array(children.length + 1);
        // Predecessor indices + 1
        const p = new Int32Array(children.length);
        m[0] = -1;
        let longest = 0;
        for (let i = 0; i < children.length; i++) {
            const current = children[i].claim_order;
            // Find the largest subsequence length such that it ends in a value less than our current value
            // upper_bound returns first greater value, so we subtract one
            // with fast path for when we are on the current longest subsequence
            const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;
            p[i] = m[seqLen] + 1;
            const newLen = seqLen + 1;
            // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.
            m[newLen] = i;
            longest = Math.max(newLen, longest);
        }
        // The longest increasing subsequence of nodes (initially reversed)
        const lis = [];
        // The rest of the nodes, nodes that will be moved
        const toMove = [];
        let last = children.length - 1;
        for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {
            lis.push(children[cur - 1]);
            for (; last >= cur; last--) {
                toMove.push(children[last]);
            }
            last--;
        }
        for (; last >= 0; last--) {
            toMove.push(children[last]);
        }
        lis.reverse();
        // We sort the nodes being moved to guarantee that their insertion order matches the claim order
        toMove.sort((a, b) => a.claim_order - b.claim_order);
        // Finally, we move the nodes
        for (let i = 0, j = 0; i < toMove.length; i++) {
            while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {
                j++;
            }
            const anchor = j < lis.length ? lis[j] : null;
            target.insertBefore(toMove[i], anchor);
        }
    }
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_node(node) {
        if (!node)
            return document;
        return (node.getRootNode ? node.getRootNode() : node.ownerDocument); // check for getRootNode because IE is still supported
    }
    function get_root_for_styles(node) {
        const root = get_root_for_node(node);
        return root.host ? root : root;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_styles(node), style_element);
        return style_element;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
    }
    function append_hydration(target, node) {
        if (is_hydrating) {
            init_hydrate(target);
            if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {
                target.actual_end_child = target.firstChild;
            }
            // Skip nodes of undefined ordering
            while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {
                target.actual_end_child = target.actual_end_child.nextSibling;
            }
            if (node !== target.actual_end_child) {
                // We only insert if the ordering of this node should be modified or the parent node is not target
                if (node.claim_order !== undefined || node.parentNode !== target) {
                    target.insertBefore(node, target.actual_end_child);
                }
            }
            else {
                target.actual_end_child = node.nextSibling;
            }
        }
        else if (node.parentNode !== target) {
            target.appendChild(node);
        }
    }
    function insert_hydration(target, node, anchor) {
        if (is_hydrating && !anchor) {
            append_hydration(target, node);
        }
        else if (node.parentNode !== target || node.nextSibling != anchor) {
            target.insertBefore(node, anchor || null);
        }
    }
    function detach(node) {
        node.parentNode.removeChild(node);
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function init_claim_info(nodes) {
        if (nodes.claim_info === undefined) {
            nodes.claim_info = { last_index: 0, total_claimed: 0 };
        }
    }
    function claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {
        // Try to find nodes in an order such that we lengthen the longest increasing subsequence
        init_claim_info(nodes);
        const resultNode = (() => {
            // We first try to find an element after the previous one
            for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {
                const node = nodes[i];
                if (predicate(node)) {
                    const replacement = processNode(node);
                    if (replacement === undefined) {
                        nodes.splice(i, 1);
                    }
                    else {
                        nodes[i] = replacement;
                    }
                    if (!dontUpdateLastIndex) {
                        nodes.claim_info.last_index = i;
                    }
                    return node;
                }
            }
            // Otherwise, we try to find one before
            // We iterate in reverse so that we don't go too far back
            for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {
                const node = nodes[i];
                if (predicate(node)) {
                    const replacement = processNode(node);
                    if (replacement === undefined) {
                        nodes.splice(i, 1);
                    }
                    else {
                        nodes[i] = replacement;
                    }
                    if (!dontUpdateLastIndex) {
                        nodes.claim_info.last_index = i;
                    }
                    else if (replacement === undefined) {
                        // Since we spliced before the last_index, we decrease it
                        nodes.claim_info.last_index--;
                    }
                    return node;
                }
            }
            // If we can't find any matching node, we create a new one
            return createNode();
        })();
        resultNode.claim_order = nodes.claim_info.total_claimed;
        nodes.claim_info.total_claimed += 1;
        return resultNode;
    }
    function claim_element(nodes, name, attributes, svg) {
        return claim_node(nodes, (node) => node.nodeName === name, (node) => {
            const remove = [];
            for (let j = 0; j < node.attributes.length; j++) {
                const attribute = node.attributes[j];
                if (!attributes[attribute.name]) {
                    remove.push(attribute.name);
                }
            }
            remove.forEach(v => node.removeAttribute(v));
            return undefined;
        }, () => svg ? svg_element(name) : element(name));
    }
    function claim_text(nodes, data) {
        return claim_node(nodes, (node) => node.nodeType === 3, (node) => {
            const dataStr = '' + data;
            if (node.data.startsWith(dataStr)) {
                if (node.data.length !== dataStr.length) {
                    return node.splitText(dataStr.length);
                }
            }
            else {
                node.data = dataStr;
            }
        }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements
        );
    }
    function claim_space(nodes) {
        return claim_text(nodes, ' ');
    }
    function set_style(node, key, value, important) {
        node.style.setProperty(key, value, important ? 'important' : '');
    }
    function select_option(select, value) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked') || select.options[0];
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, bubbles = false) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, false, detail);
        return e;
    }

    const active_docs = new Set();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_node(node);
        active_docs.add(doc);
        const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);
        const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});
        if (!current_rules[name]) {
            current_rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            active_docs.forEach(doc => {
                const stylesheet = doc.__svelte_stylesheet;
                let i = stylesheet.cssRules.length;
                while (i--)
                    stylesheet.deleteRule(i);
                doc.__svelte_rules = {};
            });
            active_docs.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    function setContext(key, context) {
        get_current_component().$$.context.set(key, context);
    }
    function getContext(key) {
        return get_current_component().$$.context.get(key);
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    const render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    let flushing = false;
    const seen_callbacks = new Set();
    function flush() {
        if (flushing)
            return;
        flushing = true;
        do {
            // first, call beforeUpdate functions
            // and update components
            for (let i = 0; i < dirty_components.length; i += 1) {
                const component = dirty_components[i];
                set_current_component(component);
                update(component.$$);
            }
            set_current_component(null);
            dirty_components.length = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        flushing = false;
        seen_callbacks.clear();
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
    }
    const null_transition = { duration: 0 };
    function create_bidirectional_transition(node, fn, params, intro) {
        let config = fn(node, params);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config();
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);

    function get_spread_update(levels, updates) {
        const update = {};
        const to_null_out = {};
        const accounted_for = { $$scope: 1 };
        let i = levels.length;
        while (i--) {
            const o = levels[i];
            const n = updates[i];
            if (n) {
                for (const key in o) {
                    if (!(key in n))
                        to_null_out[key] = 1;
                }
                for (const key in n) {
                    if (!accounted_for[key]) {
                        update[key] = n[key];
                        accounted_for[key] = 1;
                    }
                }
                levels[i] = n;
            }
            else {
                for (const key in o) {
                    accounted_for[key] = 1;
                }
            }
        }
        for (const key in to_null_out) {
            if (!(key in update))
                update[key] = undefined;
        }
        return update;
    }
    function get_spread_object(spread_props) {
        return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function claim_component(block, parent_nodes) {
        block && block.l(parent_nodes);
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, on_mount, on_destroy, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = on_mount.map(run).filter(is_function);
                if (on_destroy) {
                    on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: null,
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(parent_component ? parent_component.$$.context : options.context || []),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                start_hydrating();
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            end_hydrating();
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.40.2' }, detail), true));
    }
    function append_hydration_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append_hydration(target, node);
    }
    function insert_hydration_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert_hydration(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.wholeText === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    /* src/components/DialOuter.svelte generated by Svelte v3.40.2 */

    const { console: console_1$2 } = globals;
    const file$9 = "src/components/DialOuter.svelte";

    function create_fragment$9(ctx) {
    	let div;
    	let svg;
    	let path0;
    	let path0_d_value;
    	let path1;
    	let path1_d_value;
    	let div_aria_labelledby_value;
    	let t0;
    	let p;
    	let t1;
    	let strong;
    	let t2;
    	let t3;
    	let p_id_value;

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t0 = space();
    			p = element("p");
    			t1 = text("Average for last month: ");
    			strong = element("strong");
    			t2 = text(/*average*/ ctx[1]);
    			t3 = text(" ppb");
    			this.h();
    		},
    		l: function claim(nodes) {
    			div = claim_element(nodes, "DIV", { class: true, "aria-labelledby": true });
    			var div_nodes = children(div);

    			svg = claim_element(
    				div_nodes,
    				"svg",
    				{
    					style: true,
    					class: true,
    					viewBox: true,
    					xmlns: true
    				},
    				1
    			);

    			var svg_nodes = children(svg);
    			path0 = claim_element(svg_nodes, "path", { class: true, d: true }, 1);
    			children(path0).forEach(detach_dev);
    			path1 = claim_element(svg_nodes, "path", { class: true, d: true }, 1);
    			children(path1).forEach(detach_dev);
    			svg_nodes.forEach(detach_dev);
    			div_nodes.forEach(detach_dev);
    			t0 = claim_space(nodes);
    			p = claim_element(nodes, "P", { id: true, class: true });
    			var p_nodes = children(p);
    			t1 = claim_text(p_nodes, "Average for last month: ");
    			strong = claim_element(p_nodes, "STRONG", { class: true });
    			var strong_nodes = children(strong);
    			t2 = claim_text(strong_nodes, /*average*/ ctx[1]);
    			t3 = claim_text(strong_nodes, " ppb");
    			strong_nodes.forEach(detach_dev);
    			p_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(path0, "class", "highlight svelte-107f1uw");
    			attr_dev(path0, "d", path0_d_value = d(/*highlightPercent*/ ctx[5]));
    			toggle_class(path0, "visible", /*average*/ ctx[1]);
    			add_location(path0, file$9, 136, 2, 3262);
    			attr_dev(path1, "class", "cover svelte-107f1uw");
    			attr_dev(path1, "d", path1_d_value = d(/*coverPercent*/ ctx[4]));
    			toggle_class(path1, "visible", /*average*/ ctx[1]);
    			add_location(path1, file$9, 137, 2, 3339);
    			set_style(svg, "transform", "rotate(-180deg)");
    			attr_dev(svg, "class", "circle--outer-dial__highlight");
    			attr_dev(svg, "viewBox", "" + (-0.5 * width + " " + -0.5 * height + " " + width + " " + height));
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$9, 131, 1, 3080);
    			attr_dev(div, "class", "circle circle--clip circle--outer-dial svelte-107f1uw");
    			attr_dev(div, "aria-labelledby", div_aria_labelledby_value = "" + (/*uniqueSlug*/ ctx[0] + "-outer-label"));
    			add_location(div, file$9, 128, 0, 2981);
    			attr_dev(strong, "class", "svelte-107f1uw");
    			add_location(strong, file$9, 141, 25, 3523);
    			attr_dev(p, "id", p_id_value = "" + (/*uniqueSlug*/ ctx[0] + "-outer-label"));
    			attr_dev(p, "class", "label svelte-107f1uw");
    			toggle_class(p, "visible", /*start*/ ctx[3] && /*end*/ ctx[2]);
    			add_location(p, file$9, 140, 0, 3421);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, div, anchor);
    			append_hydration_dev(div, svg);
    			append_hydration_dev(svg, path0);
    			append_hydration_dev(svg, path1);
    			insert_hydration_dev(target, t0, anchor);
    			insert_hydration_dev(target, p, anchor);
    			append_hydration_dev(p, t1);
    			append_hydration_dev(p, strong);
    			append_hydration_dev(strong, t2);
    			append_hydration_dev(strong, t3);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*highlightPercent*/ 32 && path0_d_value !== (path0_d_value = d(/*highlightPercent*/ ctx[5]))) {
    				attr_dev(path0, "d", path0_d_value);
    			}

    			if (dirty & /*average*/ 2) {
    				toggle_class(path0, "visible", /*average*/ ctx[1]);
    			}

    			if (dirty & /*coverPercent*/ 16 && path1_d_value !== (path1_d_value = d(/*coverPercent*/ ctx[4]))) {
    				attr_dev(path1, "d", path1_d_value);
    			}

    			if (dirty & /*average*/ 2) {
    				toggle_class(path1, "visible", /*average*/ ctx[1]);
    			}

    			if (dirty & /*uniqueSlug*/ 1 && div_aria_labelledby_value !== (div_aria_labelledby_value = "" + (/*uniqueSlug*/ ctx[0] + "-outer-label"))) {
    				attr_dev(div, "aria-labelledby", div_aria_labelledby_value);
    			}

    			if (dirty & /*average*/ 2) set_data_dev(t2, /*average*/ ctx[1]);

    			if (dirty & /*uniqueSlug*/ 1 && p_id_value !== (p_id_value = "" + (/*uniqueSlug*/ ctx[0] + "-outer-label"))) {
    				attr_dev(p, "id", p_id_value);
    			}

    			if (dirty & /*start, end*/ 12) {
    				toggle_class(p, "visible", /*start*/ ctx[3] && /*end*/ ctx[2]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const height = 2;
    const width = 2;

    function getCoordinatesForPercent(percent) {
    	const x = Math.cos(2 * Math.PI * percent);
    	const y = Math.sin(2 * Math.PI * percent);
    	return [x, y];
    }

    // Returns an SVG arc to slice a % of a semicircle, starting on the left.
    function d(percent) {
    	//https://medium.com/hackernoon/a-simple-pie-chart-in-svg-dbdd653b6936
    	let cumulativePercent = 0;

    	// destructuring assignment sets the two variables at once
    	const [startX, startY] = getCoordinatesForPercent(cumulativePercent);

    	// each slice starts where the last slice ended, so keep a cumulative percent
    	cumulativePercent += percent;

    	const [endX, endY] = getCoordinatesForPercent(cumulativePercent);

    	// if the slice is more than 50%, take the large arc (the long way around)
    	const largeArcFlag = percent > 0.5 ? 1 : 0;

    	console.groupEnd();

    	// create an array and join it just for code readability
    	return [`M ${startX} ${startY}`, `A 1 1 0 ${largeArcFlag} 1 ${endX} ${endY}`, `L 0 0`].join(" "); // Move
    	// Arc
    	// Line
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let start;
    	let end;
    	let startValue;
    	let endValue;
    	let highlightPercent;
    	let coverPercent;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DialOuter', slots, []);
    	let { uniqueSlug = "" } = $$props;
    	let { min } = $$props;
    	let { max } = $$props;
    	let range = parseInt(max) - parseInt(min);
    	let { average } = $$props;
    	const writable_props = ['uniqueSlug', 'min', 'max', 'average'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<DialOuter> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('uniqueSlug' in $$props) $$invalidate(0, uniqueSlug = $$props.uniqueSlug);
    		if ('min' in $$props) $$invalidate(6, min = $$props.min);
    		if ('max' in $$props) $$invalidate(7, max = $$props.max);
    		if ('average' in $$props) $$invalidate(1, average = $$props.average);
    	};

    	$$self.$capture_state = () => ({
    		uniqueSlug,
    		min,
    		max,
    		range,
    		average,
    		height,
    		width,
    		getCoordinatesForPercent,
    		d,
    		startValue,
    		coverPercent,
    		endValue,
    		highlightPercent,
    		end,
    		start
    	});

    	$$self.$inject_state = $$props => {
    		if ('uniqueSlug' in $$props) $$invalidate(0, uniqueSlug = $$props.uniqueSlug);
    		if ('min' in $$props) $$invalidate(6, min = $$props.min);
    		if ('max' in $$props) $$invalidate(7, max = $$props.max);
    		if ('range' in $$props) $$invalidate(10, range = $$props.range);
    		if ('average' in $$props) $$invalidate(1, average = $$props.average);
    		if ('startValue' in $$props) $$invalidate(8, startValue = $$props.startValue);
    		if ('coverPercent' in $$props) $$invalidate(4, coverPercent = $$props.coverPercent);
    		if ('endValue' in $$props) $$invalidate(9, endValue = $$props.endValue);
    		if ('highlightPercent' in $$props) $$invalidate(5, highlightPercent = $$props.highlightPercent);
    		if ('end' in $$props) $$invalidate(2, end = $$props.end);
    		if ('start' in $$props) $$invalidate(3, start = $$props.start);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*average*/ 2) {
    			// Let's take a little below and a little above
    			// It's a little imprecise, yes, but we need
    			// some pixels to display
    			$$invalidate(3, start = parseInt(average) - 0.5);
    		}

    		if ($$self.$$.dirty & /*average*/ 2) {
    			$$invalidate(2, end = parseInt(average) + 0.5);
    		}

    		if ($$self.$$.dirty & /*start, min*/ 72) {
    			// Make sure our numbers are not outside the range
    			$$invalidate(8, startValue = start < min ? min : start);
    		}

    		if ($$self.$$.dirty & /*end, max*/ 132) {
    			$$invalidate(9, endValue = end > max ? max : end);
    		}

    		if ($$self.$$.dirty & /*endValue, min*/ 576) {
    			// Take our start and end values (our hi/lo) and make it into a decimal percentage (i.e. 0.5 == 50%)
    			// Cut it in half, because we are working with a semi-circle and want to show a slice of that semicircle;
    			$$invalidate(5, highlightPercent = (endValue - min) / range / 2);
    		}

    		if ($$self.$$.dirty & /*startValue, min*/ 320) {
    			$$invalidate(4, coverPercent = (startValue - min) / range / 2);
    		}
    	};

    	return [
    		uniqueSlug,
    		average,
    		end,
    		start,
    		coverPercent,
    		highlightPercent,
    		min,
    		max,
    		startValue,
    		endValue
    	];
    }

    class DialOuter extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$9, create_fragment$9, safe_not_equal, {
    			uniqueSlug: 0,
    			min: 6,
    			max: 7,
    			average: 1
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DialOuter",
    			options,
    			id: create_fragment$9.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*min*/ ctx[6] === undefined && !('min' in props)) {
    			console_1$2.warn("<DialOuter> was created without expected prop 'min'");
    		}

    		if (/*max*/ ctx[7] === undefined && !('max' in props)) {
    			console_1$2.warn("<DialOuter> was created without expected prop 'max'");
    		}

    		if (/*average*/ ctx[1] === undefined && !('average' in props)) {
    			console_1$2.warn("<DialOuter> was created without expected prop 'average'");
    		}
    	}

    	get uniqueSlug() {
    		throw new Error("<DialOuter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set uniqueSlug(value) {
    		throw new Error("<DialOuter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get min() {
    		throw new Error("<DialOuter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set min(value) {
    		throw new Error("<DialOuter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<DialOuter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<DialOuter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get average() {
    		throw new Error("<DialOuter>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set average(value) {
    		throw new Error("<DialOuter>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Needle.svelte generated by Svelte v3.40.2 */

    const file$8 = "src/components/Needle.svelte";

    // (33:1) {#if title}
    function create_if_block$5(ctx) {
    	let title_1;
    	let t;

    	const block = {
    		c: function create() {
    			title_1 = svg_element("title");
    			t = text(/*title*/ ctx[0]);
    			this.h();
    		},
    		l: function claim(nodes) {
    			title_1 = claim_element(nodes, "title", {}, 1);
    			var title_1_nodes = children(title_1);
    			t = claim_text(title_1_nodes, /*title*/ ctx[0]);
    			title_1_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			add_location(title_1, file$8, 32, 12, 534);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, title_1, anchor);
    			append_hydration_dev(title_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*title*/ 1) set_data_dev(t, /*title*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(title_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(33:1) {#if title}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let svg;
    	let path0;
    	let path1;
    	let if_block = /*title*/ ctx[0] && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			svg = svg_element("svg");
    			if (if_block) if_block.c();
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			this.h();
    		},
    		l: function claim(nodes) {
    			svg = claim_element(
    				nodes,
    				"svg",
    				{
    					xmlns: true,
    					viewBox: true,
    					style: true,
    					class: true
    				},
    				1
    			);

    			var svg_nodes = children(svg);
    			if (if_block) if_block.l(svg_nodes);
    			path0 = claim_element(svg_nodes, "path", { class: true, d: true }, 1);
    			children(path0).forEach(detach_dev);
    			path1 = claim_element(svg_nodes, "path", { fill: true, d: true }, 1);
    			children(path1).forEach(detach_dev);
    			svg_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(path0, "class", "needle-1 svelte-qjgf3a");
    			attr_dev(path0, "d", "M119.71,28.57a14,14,0,0,1-2.15.13C87.27,28.27,22.43,16.6,3,13c6.59-1,18.32-2.83,32-4.73C61.18,4.61,96.46.36,117,.5l.95.07a14.07,14.07,0,0,1,1.75,28");
    			add_location(path0, file$8, 34, 1, 564);
    			attr_dev(path1, "fill", "black");
    			attr_dev(path1, "d", "M112.71,15.1a3.59,3.59,0,1,1,4,3.06,3.59,3.59,0,0,1-4-3.06");
    			add_location(path1, file$8, 37, 1, 747);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "viewBox", "0 0 132.33 29.21");
    			set_style(svg, "transform", "translate(12%, -50%) rotate(" + /*rotation*/ ctx[1] + "deg)");
    			attr_dev(svg, "class", "svelte-qjgf3a");
    			add_location(svg, file$8, 28, 0, 388);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, svg, anchor);
    			if (if_block) if_block.m(svg, null);
    			append_hydration_dev(svg, path0);
    			append_hydration_dev(svg, path1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*title*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$5(ctx);
    					if_block.c();
    					if_block.m(svg, path0);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*rotation*/ 2) {
    				set_style(svg, "transform", "translate(12%, -50%) rotate(" + /*rotation*/ ctx[1] + "deg)");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(svg);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Needle', slots, []);
    	let { title = "" } = $$props;
    	let { rotation = 0 } = $$props;
    	const writable_props = ['title', 'rotation'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Needle> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('rotation' in $$props) $$invalidate(1, rotation = $$props.rotation);
    	};

    	$$self.$capture_state = () => ({ title, rotation });

    	$$self.$inject_state = $$props => {
    		if ('title' in $$props) $$invalidate(0, title = $$props.title);
    		if ('rotation' in $$props) $$invalidate(1, rotation = $$props.rotation);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [title, rotation];
    }

    class Needle extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { title: 0, rotation: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Needle",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get title() {
    		throw new Error("<Needle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<Needle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get rotation() {
    		throw new Error("<Needle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set rotation(value) {
    		throw new Error("<Needle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Charts.svelte generated by Svelte v3.40.2 */
    const file$7 = "src/components/Charts.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	child_ctx[10] = i;
    	return child_ctx;
    }

    // (153:3) {#each Array(main_dial_stops + 1) as _, stop}
    function create_each_block$3(ctx) {
    	let li;
    	let span;
    	let t0_value = /*getStopLabel*/ ctx[7](/*stop*/ ctx[10]) + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			li = element("li");
    			span = element("span");
    			t0 = text(t0_value);
    			t1 = space();
    			this.h();
    		},
    		l: function claim(nodes) {
    			li = claim_element(nodes, "LI", { class: true, style: true });
    			var li_nodes = children(li);
    			span = claim_element(li_nodes, "SPAN", { class: true });
    			var span_nodes = children(span);
    			t0 = claim_text(span_nodes, t0_value);
    			span_nodes.forEach(detach_dev);
    			t1 = claim_space(li_nodes);
    			li_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(span, "class", "stop__text svelte-11cmwq6");
    			add_location(span, file$7, 154, 5, 3094);
    			attr_dev(li, "class", "stop svelte-11cmwq6");
    			set_style(li, "--stop-rotation", 180 / /*main_dial_stops*/ ctx[4] * /*stop*/ ctx[10] + "deg");
    			add_location(li, file$7, 153, 4, 3010);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, li, anchor);
    			append_hydration_dev(li, span);
    			append_hydration_dev(span, t0);
    			append_hydration_dev(li, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*main_dial_stops*/ 16) {
    				set_style(li, "--stop-rotation", 180 / /*main_dial_stops*/ ctx[4] * /*stop*/ ctx[10] + "deg");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(153:3) {#each Array(main_dial_stops + 1) as _, stop}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let div3;
    	let div2;
    	let dialouter;
    	let t0;
    	let div0;
    	let t1;
    	let ul;
    	let t2;
    	let div1;
    	let t3;
    	let needle;
    	let current;

    	dialouter = new DialOuter({
    			props: {
    				average: /*average*/ ctx[1],
    				uniqueSlug: /*uniqueSlug*/ ctx[0],
    				min: /*min*/ ctx[2],
    				max: /*max*/ ctx[3]
    			},
    			$$inline: true
    		});

    	let each_value = Array(/*main_dial_stops*/ ctx[4] + 1);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	needle = new Needle({
    			props: {
    				title: "Water quality is " + /*value*/ ctx[5] + " ppb",
    				rotation: /*needleRotation*/ ctx[6]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			create_component(dialouter.$$.fragment);
    			t0 = space();
    			div0 = element("div");
    			t1 = space();
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t2 = space();
    			div1 = element("div");
    			t3 = space();
    			create_component(needle.$$.fragment);
    			this.h();
    		},
    		l: function claim(nodes) {
    			div3 = claim_element(nodes, "DIV", { class: true });
    			var div3_nodes = children(div3);
    			div2 = claim_element(div3_nodes, "DIV", { class: true });
    			var div2_nodes = children(div2);
    			claim_component(dialouter.$$.fragment, div2_nodes);
    			t0 = claim_space(div2_nodes);
    			div0 = claim_element(div2_nodes, "DIV", { class: true });
    			children(div0).forEach(detach_dev);
    			t1 = claim_space(div2_nodes);
    			ul = claim_element(div2_nodes, "UL", { class: true });
    			var ul_nodes = children(ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].l(ul_nodes);
    			}

    			ul_nodes.forEach(detach_dev);
    			t2 = claim_space(div2_nodes);
    			div1 = claim_element(div2_nodes, "DIV", { class: true });
    			children(div1).forEach(detach_dev);
    			t3 = claim_space(div2_nodes);
    			claim_component(needle.$$.fragment, div2_nodes);
    			div2_nodes.forEach(detach_dev);
    			div3_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(div0, "class", "circle circle--clip circle--inner-bg svelte-11cmwq6");
    			add_location(div0, file$7, 150, 2, 2883);
    			attr_dev(ul, "class", "stops svelte-11cmwq6");
    			add_location(ul, file$7, 151, 2, 2938);
    			attr_dev(div1, "class", "circle circle--clip circle--inner-dial svelte-11cmwq6");
    			add_location(div1, file$7, 158, 2, 3178);
    			attr_dev(div2, "class", "circles svelte-11cmwq6");
    			add_location(div2, file$7, 148, 1, 2808);
    			attr_dev(div3, "class", "chart svelte-11cmwq6");
    			add_location(div3, file$7, 147, 0, 2787);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, div3, anchor);
    			append_hydration_dev(div3, div2);
    			mount_component(dialouter, div2, null);
    			append_hydration_dev(div2, t0);
    			append_hydration_dev(div2, div0);
    			append_hydration_dev(div2, t1);
    			append_hydration_dev(div2, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul, null);
    			}

    			append_hydration_dev(div2, t2);
    			append_hydration_dev(div2, div1);
    			append_hydration_dev(div2, t3);
    			mount_component(needle, div2, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			const dialouter_changes = {};
    			if (dirty & /*average*/ 2) dialouter_changes.average = /*average*/ ctx[1];
    			if (dirty & /*uniqueSlug*/ 1) dialouter_changes.uniqueSlug = /*uniqueSlug*/ ctx[0];
    			if (dirty & /*min*/ 4) dialouter_changes.min = /*min*/ ctx[2];
    			if (dirty & /*max*/ 8) dialouter_changes.max = /*max*/ ctx[3];
    			dialouter.$set(dialouter_changes);

    			if (dirty & /*main_dial_stops, getStopLabel*/ 144) {
    				each_value = Array(/*main_dial_stops*/ ctx[4] + 1);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			const needle_changes = {};
    			if (dirty & /*value*/ 32) needle_changes.title = "Water quality is " + /*value*/ ctx[5] + " ppb";
    			if (dirty & /*needleRotation*/ 64) needle_changes.rotation = /*needleRotation*/ ctx[6];
    			needle.$set(needle_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dialouter.$$.fragment, local);
    			transition_in(needle.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dialouter.$$.fragment, local);
    			transition_out(needle.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(dialouter);
    			destroy_each(each_blocks, detaching);
    			destroy_component(needle);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let needleRotation;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Charts', slots, []);
    	let { uniqueSlug = "" } = $$props;
    	let { average } = $$props;
    	let { min } = $$props;
    	let { max } = $$props;
    	let { main_dial_stops } = $$props;
    	let { value } = $$props;

    	function getStopLabel(stop) {
    		let range = max - min;
    		let increment = range / main_dial_stops;
    		let label = increment * stop + min;
    		return stop % 2 === 0 || label === max ? label : "";
    	}

    	const writable_props = ['uniqueSlug', 'average', 'min', 'max', 'main_dial_stops', 'value'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Charts> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('uniqueSlug' in $$props) $$invalidate(0, uniqueSlug = $$props.uniqueSlug);
    		if ('average' in $$props) $$invalidate(1, average = $$props.average);
    		if ('min' in $$props) $$invalidate(2, min = $$props.min);
    		if ('max' in $$props) $$invalidate(3, max = $$props.max);
    		if ('main_dial_stops' in $$props) $$invalidate(4, main_dial_stops = $$props.main_dial_stops);
    		if ('value' in $$props) $$invalidate(5, value = $$props.value);
    	};

    	$$self.$capture_state = () => ({
    		DialOuter,
    		Needle,
    		uniqueSlug,
    		average,
    		min,
    		max,
    		main_dial_stops,
    		value,
    		getStopLabel,
    		needleRotation
    	});

    	$$self.$inject_state = $$props => {
    		if ('uniqueSlug' in $$props) $$invalidate(0, uniqueSlug = $$props.uniqueSlug);
    		if ('average' in $$props) $$invalidate(1, average = $$props.average);
    		if ('min' in $$props) $$invalidate(2, min = $$props.min);
    		if ('max' in $$props) $$invalidate(3, max = $$props.max);
    		if ('main_dial_stops' in $$props) $$invalidate(4, main_dial_stops = $$props.main_dial_stops);
    		if ('value' in $$props) $$invalidate(5, value = $$props.value);
    		if ('needleRotation' in $$props) $$invalidate(6, needleRotation = $$props.needleRotation);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*value, max, min*/ 44) {
    			$$invalidate(6, needleRotation = value ? value / (max - min) * 180 : 0);
    		}
    	};

    	return [
    		uniqueSlug,
    		average,
    		min,
    		max,
    		main_dial_stops,
    		value,
    		needleRotation,
    		getStopLabel
    	];
    }

    class Charts extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$7, create_fragment$7, safe_not_equal, {
    			uniqueSlug: 0,
    			average: 1,
    			min: 2,
    			max: 3,
    			main_dial_stops: 4,
    			value: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Charts",
    			options,
    			id: create_fragment$7.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*average*/ ctx[1] === undefined && !('average' in props)) {
    			console.warn("<Charts> was created without expected prop 'average'");
    		}

    		if (/*min*/ ctx[2] === undefined && !('min' in props)) {
    			console.warn("<Charts> was created without expected prop 'min'");
    		}

    		if (/*max*/ ctx[3] === undefined && !('max' in props)) {
    			console.warn("<Charts> was created without expected prop 'max'");
    		}

    		if (/*main_dial_stops*/ ctx[4] === undefined && !('main_dial_stops' in props)) {
    			console.warn("<Charts> was created without expected prop 'main_dial_stops'");
    		}

    		if (/*value*/ ctx[5] === undefined && !('value' in props)) {
    			console.warn("<Charts> was created without expected prop 'value'");
    		}
    	}

    	get uniqueSlug() {
    		throw new Error("<Charts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set uniqueSlug(value) {
    		throw new Error("<Charts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get average() {
    		throw new Error("<Charts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set average(value) {
    		throw new Error("<Charts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get min() {
    		throw new Error("<Charts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set min(value) {
    		throw new Error("<Charts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<Charts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<Charts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get main_dial_stops() {
    		throw new Error("<Charts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set main_dial_stops(value) {
    		throw new Error("<Charts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Charts>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Charts>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function requiredArgs(required, args) {
      if (args.length < required) {
        throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');
      }
    }

    /**
     * @name toDate
     * @category Common Helpers
     * @summary Convert the given argument to an instance of Date.
     *
     * @description
     * Convert the given argument to an instance of Date.
     *
     * If the argument is an instance of Date, the function returns its clone.
     *
     * If the argument is a number, it is treated as a timestamp.
     *
     * If the argument is none of the above, the function returns Invalid Date.
     *
     * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
     *
     * @param {Date|Number} argument - the value to convert
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // Clone the date:
     * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert the timestamp to date:
     * const result = toDate(1392098430000)
     * //=> Tue Feb 11 2014 11:30:30
     */

    function toDate$1(argument) {
      requiredArgs(1, arguments);
      var argStr = Object.prototype.toString.call(argument); // Clone the date

      if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {
        // Prevent the date to lose the milliseconds when passed to new Date() in IE10
        return new Date(argument.getTime());
      } else if (typeof argument === 'number' || argStr === '[object Number]') {
        return new Date(argument);
      } else {
        if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {
          // eslint-disable-next-line no-console
          console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"); // eslint-disable-next-line no-console

          console.warn(new Error().stack);
        }

        return new Date(NaN);
      }
    }

    /**
     * @name isValid
     * @category Common Helpers
     * @summary Is the given date valid?
     *
     * @description
     * Returns false if argument is Invalid Date and true otherwise.
     * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}
     * Invalid Date is a Date, whose time value is NaN.
     *
     * Time value of Date: http://es5.github.io/#x15.9.1.1
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * - Now `isValid` doesn't throw an exception
     *   if the first argument is not an instance of Date.
     *   Instead, argument is converted beforehand using `toDate`.
     *
     *   Examples:
     *
     *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |
     *   |---------------------------|---------------|---------------|
     *   | `new Date()`              | `true`        | `true`        |
     *   | `new Date('2016-01-01')`  | `true`        | `true`        |
     *   | `new Date('')`            | `false`       | `false`       |
     *   | `new Date(1488370835081)` | `true`        | `true`        |
     *   | `new Date(NaN)`           | `false`       | `false`       |
     *   | `'2016-01-01'`            | `TypeError`   | `false`       |
     *   | `''`                      | `TypeError`   | `false`       |
     *   | `1488370835081`           | `TypeError`   | `true`        |
     *   | `NaN`                     | `TypeError`   | `false`       |
     *
     *   We introduce this change to make *date-fns* consistent with ECMAScript behavior
     *   that try to coerce arguments to the expected type
     *   (which is also the case with other *date-fns* functions).
     *
     * @param {*} date - the date to check
     * @returns {Boolean} the date is valid
     * @throws {TypeError} 1 argument required
     *
     * @example
     * // For the valid date:
     * var result = isValid(new Date(2014, 1, 31))
     * //=> true
     *
     * @example
     * // For the value, convertable into a date:
     * var result = isValid(1393804800000)
     * //=> true
     *
     * @example
     * // For the invalid date:
     * var result = isValid(new Date(''))
     * //=> false
     */

    function isValid(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate$1(dirtyDate);
      return !isNaN(date);
    }

    var formatDistanceLocale = {
      lessThanXSeconds: {
        one: 'less than a second',
        other: 'less than {{count}} seconds'
      },
      xSeconds: {
        one: '1 second',
        other: '{{count}} seconds'
      },
      halfAMinute: 'half a minute',
      lessThanXMinutes: {
        one: 'less than a minute',
        other: 'less than {{count}} minutes'
      },
      xMinutes: {
        one: '1 minute',
        other: '{{count}} minutes'
      },
      aboutXHours: {
        one: 'about 1 hour',
        other: 'about {{count}} hours'
      },
      xHours: {
        one: '1 hour',
        other: '{{count}} hours'
      },
      xDays: {
        one: '1 day',
        other: '{{count}} days'
      },
      aboutXWeeks: {
        one: 'about 1 week',
        other: 'about {{count}} weeks'
      },
      xWeeks: {
        one: '1 week',
        other: '{{count}} weeks'
      },
      aboutXMonths: {
        one: 'about 1 month',
        other: 'about {{count}} months'
      },
      xMonths: {
        one: '1 month',
        other: '{{count}} months'
      },
      aboutXYears: {
        one: 'about 1 year',
        other: 'about {{count}} years'
      },
      xYears: {
        one: '1 year',
        other: '{{count}} years'
      },
      overXYears: {
        one: 'over 1 year',
        other: 'over {{count}} years'
      },
      almostXYears: {
        one: 'almost 1 year',
        other: 'almost {{count}} years'
      }
    };
    function formatDistance(token, count, options) {
      options = options || {};
      var result;

      if (typeof formatDistanceLocale[token] === 'string') {
        result = formatDistanceLocale[token];
      } else if (count === 1) {
        result = formatDistanceLocale[token].one;
      } else {
        result = formatDistanceLocale[token].other.replace('{{count}}', count);
      }

      if (options.addSuffix) {
        if (options.comparison > 0) {
          return 'in ' + result;
        } else {
          return result + ' ago';
        }
      }

      return result;
    }

    function buildFormatLongFn(args) {
      return function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        // TODO: Remove String()
        var width = options.width ? String(options.width) : args.defaultWidth;
        var format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
      };
    }

    var dateFormats = {
      full: 'EEEE, MMMM do, y',
      long: 'MMMM do, y',
      medium: 'MMM d, y',
      short: 'MM/dd/yyyy'
    };
    var timeFormats = {
      full: 'h:mm:ss a zzzz',
      long: 'h:mm:ss a z',
      medium: 'h:mm:ss a',
      short: 'h:mm a'
    };
    var dateTimeFormats = {
      full: "{{date}} 'at' {{time}}",
      long: "{{date}} 'at' {{time}}",
      medium: '{{date}}, {{time}}',
      short: '{{date}}, {{time}}'
    };
    var formatLong = {
      date: buildFormatLongFn({
        formats: dateFormats,
        defaultWidth: 'full'
      }),
      time: buildFormatLongFn({
        formats: timeFormats,
        defaultWidth: 'full'
      }),
      dateTime: buildFormatLongFn({
        formats: dateTimeFormats,
        defaultWidth: 'full'
      })
    };

    var formatRelativeLocale = {
      lastWeek: "'last' eeee 'at' p",
      yesterday: "'yesterday at' p",
      today: "'today at' p",
      tomorrow: "'tomorrow at' p",
      nextWeek: "eeee 'at' p",
      other: 'P'
    };
    function formatRelative(token, _date, _baseDate, _options) {
      return formatRelativeLocale[token];
    }

    function buildLocalizeFn(args) {
      return function (dirtyIndex, dirtyOptions) {
        var options = dirtyOptions || {};
        var context = options.context ? String(options.context) : 'standalone';
        var valuesArray;

        if (context === 'formatting' && args.formattingValues) {
          var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
          var width = options.width ? String(options.width) : defaultWidth;
          valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
          var _defaultWidth = args.defaultWidth;

          var _width = options.width ? String(options.width) : args.defaultWidth;

          valuesArray = args.values[_width] || args.values[_defaultWidth];
        }

        var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex; // @ts-ignore: For some reason TypeScript just don't want to match it, no matter how hard we try. I challange you to try to remove it!

        return valuesArray[index];
      };
    }

    var eraValues = {
      narrow: ['B', 'A'],
      abbreviated: ['BC', 'AD'],
      wide: ['Before Christ', 'Anno Domini']
    };
    var quarterValues = {
      narrow: ['1', '2', '3', '4'],
      abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],
      wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter']
    }; // Note: in English, the names of days of the week and months are capitalized.
    // If you are making a new locale based on this one, check if the same is true for the language you're working on.
    // Generally, formatted dates should look like they are in the middle of a sentence,
    // e.g. in Spanish language the weekdays and months should be in the lowercase.

    var monthValues = {
      narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
      abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    };
    var dayValues = {
      narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
      short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
      abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
      wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
    };
    var dayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'morning',
        afternoon: 'afternoon',
        evening: 'evening',
        night: 'night'
      }
    };
    var formattingDayPeriodValues = {
      narrow: {
        am: 'a',
        pm: 'p',
        midnight: 'mi',
        noon: 'n',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      abbreviated: {
        am: 'AM',
        pm: 'PM',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      },
      wide: {
        am: 'a.m.',
        pm: 'p.m.',
        midnight: 'midnight',
        noon: 'noon',
        morning: 'in the morning',
        afternoon: 'in the afternoon',
        evening: 'in the evening',
        night: 'at night'
      }
    };

    function ordinalNumber(dirtyNumber, _dirtyOptions) {
      var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,
      // if they are different for different grammatical genders,
      // use `options.unit`:
      //
      //   var options = dirtyOptions || {}
      //   var unit = String(options.unit)
      //
      // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
      // 'day', 'hour', 'minute', 'second'

      var rem100 = number % 100;

      if (rem100 > 20 || rem100 < 10) {
        switch (rem100 % 10) {
          case 1:
            return number + 'st';

          case 2:
            return number + 'nd';

          case 3:
            return number + 'rd';
        }
      }

      return number + 'th';
    }

    var localize = {
      ordinalNumber: ordinalNumber,
      era: buildLocalizeFn({
        values: eraValues,
        defaultWidth: 'wide'
      }),
      quarter: buildLocalizeFn({
        values: quarterValues,
        defaultWidth: 'wide',
        argumentCallback: function (quarter) {
          return Number(quarter) - 1;
        }
      }),
      month: buildLocalizeFn({
        values: monthValues,
        defaultWidth: 'wide'
      }),
      day: buildLocalizeFn({
        values: dayValues,
        defaultWidth: 'wide'
      }),
      dayPeriod: buildLocalizeFn({
        values: dayPeriodValues,
        defaultWidth: 'wide',
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: 'wide'
      })
    };

    function buildMatchPatternFn(args) {
      return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var matchResult = string.match(args.matchPattern);
        if (!matchResult) return null;
        var matchedString = matchResult[0];
        var parseResult = string.match(args.parsePattern);
        if (!parseResult) return null;
        var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
          value: value,
          rest: rest
        };
      };
    }

    function buildMatchFn(args) {
      return function (string) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var width = options.width;
        var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        var matchResult = string.match(matchPattern);

        if (!matchResult) {
          return null;
        }

        var matchedString = matchResult[0];
        var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        var key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        }) : findKey(parsePatterns, function (pattern) {
          return pattern.test(matchedString);
        });
        var value;
        value = args.valueCallback ? args.valueCallback(key) : key;
        value = options.valueCallback ? options.valueCallback(value) : value;
        var rest = string.slice(matchedString.length);
        return {
          value: value,
          rest: rest
        };
      };
    }

    function findKey(object, predicate) {
      for (var key in object) {
        if (object.hasOwnProperty(key) && predicate(object[key])) {
          return key;
        }
      }

      return undefined;
    }

    function findIndex(array, predicate) {
      for (var key = 0; key < array.length; key++) {
        if (predicate(array[key])) {
          return key;
        }
      }

      return undefined;
    }

    var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
    var parseOrdinalNumberPattern = /\d+/i;
    var matchEraPatterns = {
      narrow: /^(b|a)/i,
      abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
      wide: /^(before christ|before common era|anno domini|common era)/i
    };
    var parseEraPatterns = {
      any: [/^b/i, /^(a|c)/i]
    };
    var matchQuarterPatterns = {
      narrow: /^[1234]/i,
      abbreviated: /^q[1234]/i,
      wide: /^[1234](th|st|nd|rd)? quarter/i
    };
    var parseQuarterPatterns = {
      any: [/1/i, /2/i, /3/i, /4/i]
    };
    var matchMonthPatterns = {
      narrow: /^[jfmasond]/i,
      abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
      wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
    };
    var parseMonthPatterns = {
      narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
      any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
    };
    var matchDayPatterns = {
      narrow: /^[smtwf]/i,
      short: /^(su|mo|tu|we|th|fr|sa)/i,
      abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
      wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
    };
    var parseDayPatterns = {
      narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
      any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
    };
    var matchDayPeriodPatterns = {
      narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
      any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
    };
    var parseDayPeriodPatterns = {
      any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
      }
    };
    var match = {
      ordinalNumber: buildMatchPatternFn({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function (value) {
          return parseInt(value, 10);
        }
      }),
      era: buildMatchFn({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseEraPatterns,
        defaultParseWidth: 'any'
      }),
      quarter: buildMatchFn({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: 'any',
        valueCallback: function (index) {
          return index + 1;
        }
      }),
      month: buildMatchFn({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: 'any'
      }),
      day: buildMatchFn({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: 'wide',
        parsePatterns: parseDayPatterns,
        defaultParseWidth: 'any'
      }),
      dayPeriod: buildMatchFn({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: 'any',
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: 'any'
      })
    };

    /**
     * @type {Locale}
     * @category Locales
     * @summary English locale (United States).
     * @language English
     * @iso-639-2 eng
     * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}
     * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}
     */

    var locale = {
      code: 'en-US',
      formatDistance: formatDistance,
      formatLong: formatLong,
      formatRelative: formatRelative,
      localize: localize,
      match: match,
      options: {
        weekStartsOn: 0
        /* Sunday */
        ,
        firstWeekContainsDate: 1
      }
    };

    function toInteger(dirtyNumber) {
      if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
        return NaN;
      }

      var number = Number(dirtyNumber);

      if (isNaN(number)) {
        return number;
      }

      return number < 0 ? Math.ceil(number) : Math.floor(number);
    }

    /**
     * @name addMilliseconds
     * @category Millisecond Helpers
     * @summary Add the specified number of milliseconds to the given date.
     *
     * @description
     * Add the specified number of milliseconds to the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds added
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
     * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:30.750
     */

    function addMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var timestamp = toDate$1(dirtyDate).getTime();
      var amount = toInteger(dirtyAmount);
      return new Date(timestamp + amount);
    }

    /**
     * @name subMilliseconds
     * @category Millisecond Helpers
     * @summary Subtract the specified number of milliseconds from the given date.
     *
     * @description
     * Subtract the specified number of milliseconds from the given date.
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * @param {Date|Number} date - the date to be changed
     * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.
     * @returns {Date} the new date with the milliseconds subtracted
     * @throws {TypeError} 2 arguments required
     *
     * @example
     * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
     * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
     * //=> Thu Jul 10 2014 12:45:29.250
     */

    function subMilliseconds(dirtyDate, dirtyAmount) {
      requiredArgs(2, arguments);
      var amount = toInteger(dirtyAmount);
      return addMilliseconds(dirtyDate, -amount);
    }

    function addLeadingZeros$1(number, targetLength) {
      var sign = number < 0 ? '-' : '';
      var output = Math.abs(number).toString();

      while (output.length < targetLength) {
        output = '0' + output;
      }

      return sign + output;
    }

    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* |                                |
     * |  d  | Day of month                   |  D  |                                |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  m  | Minute                         |  M  | Month                          |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  y  | Year (abs)                     |  Y  |                                |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     */

    var formatters$2 = {
      // Year
      y: function (date, token) {
        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
        // |----------|-------|----|-------|-------|-------|
        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
        var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

        var year = signedYear > 0 ? signedYear : 1 - signedYear;
        return addLeadingZeros$1(token === 'yy' ? year % 100 : year, token.length);
      },
      // Month
      M: function (date, token) {
        var month = date.getUTCMonth();
        return token === 'M' ? String(month + 1) : addLeadingZeros$1(month + 1, 2);
      },
      // Day of the month
      d: function (date, token) {
        return addLeadingZeros$1(date.getUTCDate(), token.length);
      },
      // AM or PM
      a: function (date, token) {
        var dayPeriodEnumValue = date.getUTCHours() / 12 >= 1 ? 'pm' : 'am';

        switch (token) {
          case 'a':
          case 'aa':
            return dayPeriodEnumValue.toUpperCase();

          case 'aaa':
            return dayPeriodEnumValue;

          case 'aaaaa':
            return dayPeriodEnumValue[0];

          case 'aaaa':
          default:
            return dayPeriodEnumValue === 'am' ? 'a.m.' : 'p.m.';
        }
      },
      // Hour [1-12]
      h: function (date, token) {
        return addLeadingZeros$1(date.getUTCHours() % 12 || 12, token.length);
      },
      // Hour [0-23]
      H: function (date, token) {
        return addLeadingZeros$1(date.getUTCHours(), token.length);
      },
      // Minute
      m: function (date, token) {
        return addLeadingZeros$1(date.getUTCMinutes(), token.length);
      },
      // Second
      s: function (date, token) {
        return addLeadingZeros$1(date.getUTCSeconds(), token.length);
      },
      // Fraction of second
      S: function (date, token) {
        var numberOfDigits = token.length;
        var milliseconds = date.getUTCMilliseconds();
        var fractionalSeconds = Math.floor(milliseconds * Math.pow(10, numberOfDigits - 3));
        return addLeadingZeros$1(fractionalSeconds, token.length);
      }
    };

    var MILLISECONDS_IN_DAY = 86400000; // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCDayOfYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate$1(dirtyDate);
      var timestamp = date.getTime();
      date.setUTCMonth(0, 1);
      date.setUTCHours(0, 0, 0, 0);
      var startOfYearTimestamp = date.getTime();
      var difference = timestamp - startOfYearTimestamp;
      return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var weekStartsOn = 1;
      var date = toDate$1(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate$1(dirtyDate);
      var year = date.getUTCFullYear();
      var fourthOfJanuaryOfNextYear = new Date(0);
      fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
      fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCISOWeek(fourthOfJanuaryOfNextYear);
      var fourthOfJanuaryOfThisYear = new Date(0);
      fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
      fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCISOWeek(fourthOfJanuaryOfThisYear);

      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCISOWeekYear(dirtyDate) {
      requiredArgs(1, arguments);
      var year = getUTCISOWeekYear(dirtyDate);
      var fourthOfJanuary = new Date(0);
      fourthOfJanuary.setUTCFullYear(year, 0, 4);
      fourthOfJanuary.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCISOWeek(fourthOfJanuary);
      return date;
    }

    var MILLISECONDS_IN_WEEK$1 = 604800000; // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCISOWeek(dirtyDate) {
      requiredArgs(1, arguments);
      var date = toDate$1(dirtyDate);
      var diff = startOfUTCISOWeek(date).getTime() - startOfUTCISOWeekYear(date).getTime(); // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)

      return Math.round(diff / MILLISECONDS_IN_WEEK$1) + 1;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCWeek(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeWeekStartsOn = locale && locale.options && locale.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
      var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }

      var date = toDate$1(dirtyDate);
      var day = date.getUTCDay();
      var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
      date.setUTCDate(date.getUTCDate() - diff);
      date.setUTCHours(0, 0, 0, 0);
      return date;
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCWeekYear(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var date = toDate$1(dirtyDate, dirtyOptions);
      var year = date.getUTCFullYear();
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }

      var firstWeekOfNextYear = new Date(0);
      firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
      firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
      var startOfNextYear = startOfUTCWeek(firstWeekOfNextYear, dirtyOptions);
      var firstWeekOfThisYear = new Date(0);
      firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
      var startOfThisYear = startOfUTCWeek(firstWeekOfThisYear, dirtyOptions);

      if (date.getTime() >= startOfNextYear.getTime()) {
        return year + 1;
      } else if (date.getTime() >= startOfThisYear.getTime()) {
        return year;
      } else {
        return year - 1;
      }
    }

    // See issue: https://github.com/date-fns/date-fns/issues/376

    function startOfUTCWeekYear(dirtyDate, dirtyOptions) {
      requiredArgs(1, arguments);
      var options = dirtyOptions || {};
      var locale = options.locale;
      var localeFirstWeekContainsDate = locale && locale.options && locale.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate);
      var year = getUTCWeekYear(dirtyDate, dirtyOptions);
      var firstWeek = new Date(0);
      firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
      firstWeek.setUTCHours(0, 0, 0, 0);
      var date = startOfUTCWeek(firstWeek, dirtyOptions);
      return date;
    }

    var MILLISECONDS_IN_WEEK = 604800000; // This function will be a part of public API when UTC function will be implemented.
    // See issue: https://github.com/date-fns/date-fns/issues/376

    function getUTCWeek(dirtyDate, options) {
      requiredArgs(1, arguments);
      var date = toDate$1(dirtyDate);
      var diff = startOfUTCWeek(date, options).getTime() - startOfUTCWeekYear(date, options).getTime(); // Round the number of days to the nearest integer
      // because the number of milliseconds in a week is not constant
      // (e.g. it's different in the week of the daylight saving time clock shift)

      return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
    }

    var dayPeriodEnum = {
      am: 'am',
      pm: 'pm',
      midnight: 'midnight',
      noon: 'noon',
      morning: 'morning',
      afternoon: 'afternoon',
      evening: 'evening',
      night: 'night'
    };
    /*
     * |     | Unit                           |     | Unit                           |
     * |-----|--------------------------------|-----|--------------------------------|
     * |  a  | AM, PM                         |  A* | Milliseconds in day            |
     * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
     * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
     * |  d  | Day of month                   |  D  | Day of year                    |
     * |  e  | Local day of week              |  E  | Day of week                    |
     * |  f  |                                |  F* | Day of week in month           |
     * |  g* | Modified Julian day            |  G  | Era                            |
     * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
     * |  i! | ISO day of week                |  I! | ISO week of year               |
     * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
     * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
     * |  l* | (deprecated)                   |  L  | Stand-alone month              |
     * |  m  | Minute                         |  M  | Month                          |
     * |  n  |                                |  N  |                                |
     * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
     * |  p! | Long localized time            |  P! | Long localized date            |
     * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
     * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
     * |  s  | Second                         |  S  | Fraction of second             |
     * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
     * |  u  | Extended year                  |  U* | Cyclic year                    |
     * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
     * |  w  | Local week of year             |  W* | Week of month                  |
     * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
     * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
     * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
     *
     * Letters marked by * are not implemented but reserved by Unicode standard.
     *
     * Letters marked by ! are non-standard, but implemented by date-fns:
     * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
     * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
     *   i.e. 7 for Sunday, 1 for Monday, etc.
     * - `I` is ISO week of year, as opposed to `w` which is local week of year.
     * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
     *   `R` is supposed to be used in conjunction with `I` and `i`
     *   for universal ISO week-numbering date, whereas
     *   `Y` is supposed to be used in conjunction with `w` and `e`
     *   for week-numbering date specific to the locale.
     * - `P` is long localized date format
     * - `p` is long localized time format
     */

    var formatters$1 = {
      // Era
      G: function (date, token, localize) {
        var era = date.getUTCFullYear() > 0 ? 1 : 0;

        switch (token) {
          // AD, BC
          case 'G':
          case 'GG':
          case 'GGG':
            return localize.era(era, {
              width: 'abbreviated'
            });
          // A, B

          case 'GGGGG':
            return localize.era(era, {
              width: 'narrow'
            });
          // Anno Domini, Before Christ

          case 'GGGG':
          default:
            return localize.era(era, {
              width: 'wide'
            });
        }
      },
      // Year
      y: function (date, token, localize) {
        // Ordinal number
        if (token === 'yo') {
          var signedYear = date.getUTCFullYear(); // Returns 1 for 1 BC (which is year 0 in JavaScript)

          var year = signedYear > 0 ? signedYear : 1 - signedYear;
          return localize.ordinalNumber(year, {
            unit: 'year'
          });
        }

        return formatters$2.y(date, token);
      },
      // Local week-numbering year
      Y: function (date, token, localize, options) {
        var signedWeekYear = getUTCWeekYear(date, options); // Returns 1 for 1 BC (which is year 0 in JavaScript)

        var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear; // Two digit year

        if (token === 'YY') {
          var twoDigitYear = weekYear % 100;
          return addLeadingZeros$1(twoDigitYear, 2);
        } // Ordinal number


        if (token === 'Yo') {
          return localize.ordinalNumber(weekYear, {
            unit: 'year'
          });
        } // Padding


        return addLeadingZeros$1(weekYear, token.length);
      },
      // ISO week-numbering year
      R: function (date, token) {
        var isoWeekYear = getUTCISOWeekYear(date); // Padding

        return addLeadingZeros$1(isoWeekYear, token.length);
      },
      // Extended year. This is a single number designating the year of this calendar system.
      // The main difference between `y` and `u` localizers are B.C. years:
      // | Year | `y` | `u` |
      // |------|-----|-----|
      // | AC 1 |   1 |   1 |
      // | BC 1 |   1 |   0 |
      // | BC 2 |   2 |  -1 |
      // Also `yy` always returns the last two digits of a year,
      // while `uu` pads single digit years to 2 characters and returns other years unchanged.
      u: function (date, token) {
        var year = date.getUTCFullYear();
        return addLeadingZeros$1(year, token.length);
      },
      // Quarter
      Q: function (date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

        switch (token) {
          // 1, 2, 3, 4
          case 'Q':
            return String(quarter);
          // 01, 02, 03, 04

          case 'QQ':
            return addLeadingZeros$1(quarter, 2);
          // 1st, 2nd, 3rd, 4th

          case 'Qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4

          case 'QQQ':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)

          case 'QQQQQ':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'formatting'
            });
          // 1st quarter, 2nd quarter, ...

          case 'QQQQ':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone quarter
      q: function (date, token, localize) {
        var quarter = Math.ceil((date.getUTCMonth() + 1) / 3);

        switch (token) {
          // 1, 2, 3, 4
          case 'q':
            return String(quarter);
          // 01, 02, 03, 04

          case 'qq':
            return addLeadingZeros$1(quarter, 2);
          // 1st, 2nd, 3rd, 4th

          case 'qo':
            return localize.ordinalNumber(quarter, {
              unit: 'quarter'
            });
          // Q1, Q2, Q3, Q4

          case 'qqq':
            return localize.quarter(quarter, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // 1, 2, 3, 4 (narrow quarter; could be not numerical)

          case 'qqqqq':
            return localize.quarter(quarter, {
              width: 'narrow',
              context: 'standalone'
            });
          // 1st quarter, 2nd quarter, ...

          case 'qqqq':
          default:
            return localize.quarter(quarter, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Month
      M: function (date, token, localize) {
        var month = date.getUTCMonth();

        switch (token) {
          case 'M':
          case 'MM':
            return formatters$2.M(date, token);
          // 1st, 2nd, ..., 12th

          case 'Mo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec

          case 'MMM':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // J, F, ..., D

          case 'MMMMM':
            return localize.month(month, {
              width: 'narrow',
              context: 'formatting'
            });
          // January, February, ..., December

          case 'MMMM':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone month
      L: function (date, token, localize) {
        var month = date.getUTCMonth();

        switch (token) {
          // 1, 2, ..., 12
          case 'L':
            return String(month + 1);
          // 01, 02, ..., 12

          case 'LL':
            return addLeadingZeros$1(month + 1, 2);
          // 1st, 2nd, ..., 12th

          case 'Lo':
            return localize.ordinalNumber(month + 1, {
              unit: 'month'
            });
          // Jan, Feb, ..., Dec

          case 'LLL':
            return localize.month(month, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // J, F, ..., D

          case 'LLLLL':
            return localize.month(month, {
              width: 'narrow',
              context: 'standalone'
            });
          // January, February, ..., December

          case 'LLLL':
          default:
            return localize.month(month, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // Local week of year
      w: function (date, token, localize, options) {
        var week = getUTCWeek(date, options);

        if (token === 'wo') {
          return localize.ordinalNumber(week, {
            unit: 'week'
          });
        }

        return addLeadingZeros$1(week, token.length);
      },
      // ISO week of year
      I: function (date, token, localize) {
        var isoWeek = getUTCISOWeek(date);

        if (token === 'Io') {
          return localize.ordinalNumber(isoWeek, {
            unit: 'week'
          });
        }

        return addLeadingZeros$1(isoWeek, token.length);
      },
      // Day of the month
      d: function (date, token, localize) {
        if (token === 'do') {
          return localize.ordinalNumber(date.getUTCDate(), {
            unit: 'date'
          });
        }

        return formatters$2.d(date, token);
      },
      // Day of year
      D: function (date, token, localize) {
        var dayOfYear = getUTCDayOfYear(date);

        if (token === 'Do') {
          return localize.ordinalNumber(dayOfYear, {
            unit: 'dayOfYear'
          });
        }

        return addLeadingZeros$1(dayOfYear, token.length);
      },
      // Day of week
      E: function (date, token, localize) {
        var dayOfWeek = date.getUTCDay();

        switch (token) {
          // Tue
          case 'E':
          case 'EE':
          case 'EEE':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T

          case 'EEEEE':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu

          case 'EEEEEE':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday

          case 'EEEE':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Local day of week
      e: function (date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

        switch (token) {
          // Numerical value (Nth day of week with current locale or weekStartsOn)
          case 'e':
            return String(localDayOfWeek);
          // Padded numerical value

          case 'ee':
            return addLeadingZeros$1(localDayOfWeek, 2);
          // 1st, 2nd, ..., 7th

          case 'eo':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });

          case 'eee':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T

          case 'eeeee':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu

          case 'eeeeee':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday

          case 'eeee':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Stand-alone local day of week
      c: function (date, token, localize, options) {
        var dayOfWeek = date.getUTCDay();
        var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;

        switch (token) {
          // Numerical value (same as in `e`)
          case 'c':
            return String(localDayOfWeek);
          // Padded numerical value

          case 'cc':
            return addLeadingZeros$1(localDayOfWeek, token.length);
          // 1st, 2nd, ..., 7th

          case 'co':
            return localize.ordinalNumber(localDayOfWeek, {
              unit: 'day'
            });

          case 'ccc':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'standalone'
            });
          // T

          case 'ccccc':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'standalone'
            });
          // Tu

          case 'cccccc':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'standalone'
            });
          // Tuesday

          case 'cccc':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'standalone'
            });
        }
      },
      // ISO day of week
      i: function (date, token, localize) {
        var dayOfWeek = date.getUTCDay();
        var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;

        switch (token) {
          // 2
          case 'i':
            return String(isoDayOfWeek);
          // 02

          case 'ii':
            return addLeadingZeros$1(isoDayOfWeek, token.length);
          // 2nd

          case 'io':
            return localize.ordinalNumber(isoDayOfWeek, {
              unit: 'day'
            });
          // Tue

          case 'iii':
            return localize.day(dayOfWeek, {
              width: 'abbreviated',
              context: 'formatting'
            });
          // T

          case 'iiiii':
            return localize.day(dayOfWeek, {
              width: 'narrow',
              context: 'formatting'
            });
          // Tu

          case 'iiiiii':
            return localize.day(dayOfWeek, {
              width: 'short',
              context: 'formatting'
            });
          // Tuesday

          case 'iiii':
          default:
            return localize.day(dayOfWeek, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM or PM
      a: function (date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';

        switch (token) {
          case 'a':
          case 'aa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });

          case 'aaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();

          case 'aaaaa':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });

          case 'aaaa':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // AM, PM, midnight, noon
      b: function (date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;

        if (hours === 12) {
          dayPeriodEnumValue = dayPeriodEnum.noon;
        } else if (hours === 0) {
          dayPeriodEnumValue = dayPeriodEnum.midnight;
        } else {
          dayPeriodEnumValue = hours / 12 >= 1 ? 'pm' : 'am';
        }

        switch (token) {
          case 'b':
          case 'bb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });

          case 'bbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            }).toLowerCase();

          case 'bbbbb':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });

          case 'bbbb':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // in the morning, in the afternoon, in the evening, at night
      B: function (date, token, localize) {
        var hours = date.getUTCHours();
        var dayPeriodEnumValue;

        if (hours >= 17) {
          dayPeriodEnumValue = dayPeriodEnum.evening;
        } else if (hours >= 12) {
          dayPeriodEnumValue = dayPeriodEnum.afternoon;
        } else if (hours >= 4) {
          dayPeriodEnumValue = dayPeriodEnum.morning;
        } else {
          dayPeriodEnumValue = dayPeriodEnum.night;
        }

        switch (token) {
          case 'B':
          case 'BB':
          case 'BBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'abbreviated',
              context: 'formatting'
            });

          case 'BBBBB':
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'narrow',
              context: 'formatting'
            });

          case 'BBBB':
          default:
            return localize.dayPeriod(dayPeriodEnumValue, {
              width: 'wide',
              context: 'formatting'
            });
        }
      },
      // Hour [1-12]
      h: function (date, token, localize) {
        if (token === 'ho') {
          var hours = date.getUTCHours() % 12;
          if (hours === 0) hours = 12;
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }

        return formatters$2.h(date, token);
      },
      // Hour [0-23]
      H: function (date, token, localize) {
        if (token === 'Ho') {
          return localize.ordinalNumber(date.getUTCHours(), {
            unit: 'hour'
          });
        }

        return formatters$2.H(date, token);
      },
      // Hour [0-11]
      K: function (date, token, localize) {
        var hours = date.getUTCHours() % 12;

        if (token === 'Ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }

        return addLeadingZeros$1(hours, token.length);
      },
      // Hour [1-24]
      k: function (date, token, localize) {
        var hours = date.getUTCHours();
        if (hours === 0) hours = 24;

        if (token === 'ko') {
          return localize.ordinalNumber(hours, {
            unit: 'hour'
          });
        }

        return addLeadingZeros$1(hours, token.length);
      },
      // Minute
      m: function (date, token, localize) {
        if (token === 'mo') {
          return localize.ordinalNumber(date.getUTCMinutes(), {
            unit: 'minute'
          });
        }

        return formatters$2.m(date, token);
      },
      // Second
      s: function (date, token, localize) {
        if (token === 'so') {
          return localize.ordinalNumber(date.getUTCSeconds(), {
            unit: 'second'
          });
        }

        return formatters$2.s(date, token);
      },
      // Fraction of second
      S: function (date, token) {
        return formatters$2.S(date, token);
      },
      // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
      X: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        if (timezoneOffset === 0) {
          return 'Z';
        }

        switch (token) {
          // Hours and optional minutes
          case 'X':
            return formatTimezoneWithOptionalMinutes$1(timezoneOffset);
          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XX`

          case 'XXXX':
          case 'XX':
            // Hours and minutes without `:` delimiter
            return formatTimezone$1(timezoneOffset);
          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XXX`

          case 'XXXXX':
          case 'XXX': // Hours and minutes with `:` delimiter

          default:
            return formatTimezone$1(timezoneOffset, ':');
        }
      },
      // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
      x: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        switch (token) {
          // Hours and optional minutes
          case 'x':
            return formatTimezoneWithOptionalMinutes$1(timezoneOffset);
          // Hours, minutes and optional seconds without `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xx`

          case 'xxxx':
          case 'xx':
            // Hours and minutes without `:` delimiter
            return formatTimezone$1(timezoneOffset);
          // Hours, minutes and optional seconds with `:` delimiter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xxx`

          case 'xxxxx':
          case 'xxx': // Hours and minutes with `:` delimiter

          default:
            return formatTimezone$1(timezoneOffset, ':');
        }
      },
      // Timezone (GMT)
      O: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        switch (token) {
          // Short
          case 'O':
          case 'OO':
          case 'OOO':
            return 'GMT' + formatTimezoneShort$1(timezoneOffset, ':');
          // Long

          case 'OOOO':
          default:
            return 'GMT' + formatTimezone$1(timezoneOffset, ':');
        }
      },
      // Timezone (specific non-location)
      z: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = originalDate.getTimezoneOffset();

        switch (token) {
          // Short
          case 'z':
          case 'zz':
          case 'zzz':
            return 'GMT' + formatTimezoneShort$1(timezoneOffset, ':');
          // Long

          case 'zzzz':
          default:
            return 'GMT' + formatTimezone$1(timezoneOffset, ':');
        }
      },
      // Seconds timestamp
      t: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = Math.floor(originalDate.getTime() / 1000);
        return addLeadingZeros$1(timestamp, token.length);
      },
      // Milliseconds timestamp
      T: function (date, token, _localize, options) {
        var originalDate = options._originalDate || date;
        var timestamp = originalDate.getTime();
        return addLeadingZeros$1(timestamp, token.length);
      }
    };

    function formatTimezoneShort$1(offset, dirtyDelimiter) {
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = Math.floor(absOffset / 60);
      var minutes = absOffset % 60;

      if (minutes === 0) {
        return sign + String(hours);
      }

      var delimiter = dirtyDelimiter || '';
      return sign + String(hours) + delimiter + addLeadingZeros$1(minutes, 2);
    }

    function formatTimezoneWithOptionalMinutes$1(offset, dirtyDelimiter) {
      if (offset % 60 === 0) {
        var sign = offset > 0 ? '-' : '+';
        return sign + addLeadingZeros$1(Math.abs(offset) / 60, 2);
      }

      return formatTimezone$1(offset, dirtyDelimiter);
    }

    function formatTimezone$1(offset, dirtyDelimiter) {
      var delimiter = dirtyDelimiter || '';
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = addLeadingZeros$1(Math.floor(absOffset / 60), 2);
      var minutes = addLeadingZeros$1(absOffset % 60, 2);
      return sign + hours + delimiter + minutes;
    }

    function dateLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'P':
          return formatLong.date({
            width: 'short'
          });

        case 'PP':
          return formatLong.date({
            width: 'medium'
          });

        case 'PPP':
          return formatLong.date({
            width: 'long'
          });

        case 'PPPP':
        default:
          return formatLong.date({
            width: 'full'
          });
      }
    }

    function timeLongFormatter(pattern, formatLong) {
      switch (pattern) {
        case 'p':
          return formatLong.time({
            width: 'short'
          });

        case 'pp':
          return formatLong.time({
            width: 'medium'
          });

        case 'ppp':
          return formatLong.time({
            width: 'long'
          });

        case 'pppp':
        default:
          return formatLong.time({
            width: 'full'
          });
      }
    }

    function dateTimeLongFormatter(pattern, formatLong) {
      var matchResult = pattern.match(/(P+)(p+)?/);
      var datePattern = matchResult[1];
      var timePattern = matchResult[2];

      if (!timePattern) {
        return dateLongFormatter(pattern, formatLong);
      }

      var dateTimeFormat;

      switch (datePattern) {
        case 'P':
          dateTimeFormat = formatLong.dateTime({
            width: 'short'
          });
          break;

        case 'PP':
          dateTimeFormat = formatLong.dateTime({
            width: 'medium'
          });
          break;

        case 'PPP':
          dateTimeFormat = formatLong.dateTime({
            width: 'long'
          });
          break;

        case 'PPPP':
        default:
          dateTimeFormat = formatLong.dateTime({
            width: 'full'
          });
          break;
      }

      return dateTimeFormat.replace('{{date}}', dateLongFormatter(datePattern, formatLong)).replace('{{time}}', timeLongFormatter(timePattern, formatLong));
    }

    var longFormatters = {
      p: timeLongFormatter,
      P: dateTimeLongFormatter
    };

    /**
     * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
     * They usually appear for dates that denote time before the timezones were introduced
     * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
     * and GMT+01:00:00 after that date)
     *
     * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
     * which would lead to incorrect calculations.
     *
     * This function returns the timezone offset in milliseconds that takes seconds in account.
     */
    function getTimezoneOffsetInMilliseconds(date) {
      var utcDate = new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds()));
      utcDate.setUTCFullYear(date.getFullYear());
      return date.getTime() - utcDate.getTime();
    }

    var protectedDayOfYearTokens = ['D', 'DD'];
    var protectedWeekYearTokens = ['YY', 'YYYY'];
    function isProtectedDayOfYearToken(token) {
      return protectedDayOfYearTokens.indexOf(token) !== -1;
    }
    function isProtectedWeekYearToken(token) {
      return protectedWeekYearTokens.indexOf(token) !== -1;
    }
    function throwProtectedError(token, format, input) {
      if (token === 'YYYY') {
        throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === 'YY') {
        throw new RangeError("Use `yy` instead of `YY` (in `".concat(format, "`) for formatting years to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === 'D') {
        throw new RangeError("Use `d` instead of `D` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      } else if (token === 'DD') {
        throw new RangeError("Use `dd` instead of `DD` (in `".concat(format, "`) for formatting days of the month to the input `").concat(input, "`; see: https://git.io/fxCyr"));
      }
    }

    // - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
    //   (one of the certain letters followed by `o`)
    // - (\w)\1* matches any sequences of the same letter
    // - '' matches two quote characters in a row
    // - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
    //   except a single quote symbol, which ends the sequence.
    //   Two quote characters do not end the sequence.
    //   If there is no matching single quote
    //   then the sequence will continue until the end of the string.
    // - . matches any single character unmatched by previous parts of the RegExps

    var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g; // This RegExp catches symbols escaped by quotes, and also
    // sequences of symbols P, p, and the combinations like `PPPPPPPppppp`

    var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
    var escapedStringRegExp = /^'([^]*?)'?$/;
    var doubleQuoteRegExp = /''/g;
    var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
    /**
     * @name format
     * @category Common Helpers
     * @summary Format the date.
     *
     * @description
     * Return the formatted date string in the given format. The result may vary by locale.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://git.io/fxCyr
     *
     * The characters wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     * (see the last example)
     *
     * Format of the string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 7 below the table).
     *
     * Accepted patterns:
     * | Unit                            | Pattern | Result examples                   | Notes |
     * |---------------------------------|---------|-----------------------------------|-------|
     * | Era                             | G..GGG  | AD, BC                            |       |
     * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 | GGGGG   | A, B                              |       |
     * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
     * |                                 | yy      | 44, 01, 00, 17                    | 5     |
     * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
     * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
     * |                                 | yyyyy   | ...                               | 3,5   |
     * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
     * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
     * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
     * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
     * |                                 | YYYYY   | ...                               | 3,5   |
     * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
     * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
     * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
     * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
     * |                                 | RRRRR   | ...                               | 3,5,7 |
     * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
     * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
     * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
     * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
     * |                                 | uuuuu   | ...                               | 3,5   |
     * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
     * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | QQ      | 01, 02, 03, 04                    |       |
     * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
     * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | qq      | 01, 02, 03, 04                    |       |
     * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
     * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
     * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | MM      | 01, 02, ..., 12                   |       |
     * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 | MMMM    | January, February, ..., December  | 2     |
     * |                                 | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
     * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | LL      | 01, 02, ..., 12                   |       |
     * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 | LLLL    | January, February, ..., December  | 2     |
     * |                                 | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | w       | 1, 2, ..., 53                     |       |
     * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
     * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | II      | 01, 02, ..., 53                   | 7     |
     * | Day of month                    | d       | 1, 2, ..., 31                     |       |
     * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
     * |                                 | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
     * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
     * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
     * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 | DDDD    | ...                               | 3     |
     * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
     * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
     * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
     * |                                 | ii      | 01, 02, ..., 07                   | 7     |
     * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
     * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
     * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
     * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |
     * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | ee      | 02, 03, ..., 01                   |       |
     * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
     * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | cc      | 02, 03, ..., 01                   |       |
     * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
     * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
     * | AM, PM                          | a..aa   | AM, PM                            |       |
     * |                                 | aaa     | am, pm                            |       |
     * |                                 | aaaa    | a.m., p.m.                        | 2     |
     * |                                 | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
     * |                                 | bbb     | am, pm, noon, midnight            |       |
     * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
     * |                                 | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
     * |                                 | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
     * |                                 | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
     * |                                 | KK      | 01, 02, ..., 11, 00               |       |
     * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
     * |                                 | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          | m       | 0, 1, ..., 59                     |       |
     * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | mm      | 00, 01, ..., 59                   |       |
     * | Second                          | s       | 0, 1, ..., 59                     |       |
     * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | ss      | 00, 01, ..., 59                   |       |
     * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
     * |                                 | SS      | 00, 01, ..., 99                   |       |
     * |                                 | SSS     | 000, 001, ..., 999                |       |
     * |                                 | SSSS    | ...                               | 3     |
     * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
     * |                                 | XX      | -0800, +0530, Z                   |       |
     * |                                 | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
     * |                                 | xx      | -0800, +0530, +0000               |       |
     * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
     * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
     * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
     * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
     * | Seconds timestamp               | t       | 512969520                         | 7     |
     * |                                 | tt      | ...                               | 3,7   |
     * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
     * |                                 | TT      | ...                               | 3,7   |
     * | Long localized date             | P       | 04/29/1453                        | 7     |
     * |                                 | PP      | Apr 29, 1453                      | 7     |
     * |                                 | PPP     | April 29th, 1453                  | 7     |
     * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
     * | Long localized time             | p       | 12:00 AM                          | 7     |
     * |                                 | pp      | 12:00:00 AM                       | 7     |
     * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
     * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
     * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
     * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
     * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
     * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
     *    the output will be the same as default pattern for this unit, usually
     *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
     *    are marked with "2" in the last column of the table.
     *
     *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
     *
     * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
     *    The output will be padded with zeros to match the length of the pattern.
     *
     *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
     *
     * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 5. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` always returns the last two digits of a year,
     *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
     *
     *    | Year | `yy` | `uu` |
     *    |------|------|------|
     *    | 1    |   01 |   01 |
     *    | 14   |   14 |   14 |
     *    | 376  |   76 |  376 |
     *    | 1453 |   53 | 1453 |
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
     *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
     *
     * 6. Specific non-location timezones are currently unavailable in `date-fns`,
     *    so right now these tokens fall back to GMT timezones.
     *
     * 7. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `t`: seconds timestamp
     *    - `T`: milliseconds timestamp
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
     *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://git.io/fxCyr
     *
     * 9. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
     *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://git.io/fxCyr
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * - The second argument is now required for the sake of explicitness.
     *
     *   ```javascript
     *   // Before v2.0.0
     *   format(new Date(2016, 0, 1))
     *
     *   // v2.0.0 onward
     *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
     *   ```
     *
     * - New format string API for `format` function
     *   which is based on [Unicode Technical Standard #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table).
     *   See [this post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
     *
     * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
     *
     * @param {Date|Number} date - the original date
     * @param {String} format - the string of tokens
     * @param {Object} [options] - an object with options.
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
     * @param {Boolean} [options.useAdditionalWeekYearTokens=false] - if true, allows usage of the week-numbering year tokens `YY` and `YYYY`;
     *   see: https://git.io/fxCyr
     * @param {Boolean} [options.useAdditionalDayOfYearTokens=false] - if true, allows usage of the day of year tokens `D` and `DD`;
     *   see: https://git.io/fxCyr
     * @returns {String} the formatted date string
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `date` must not be Invalid Date
     * @throws {RangeError} `options.locale` must contain `localize` property
     * @throws {RangeError} `options.locale` must contain `formatLong` property
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://git.io/fxCyr
     * @throws {RangeError} format string contains an unescaped latin alphabet character
     *
     * @example
     * // Represent 11 February 2014 in middle-endian format:
     * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
     * //=> '02/11/2014'
     *
     * @example
     * // Represent 2 July 2014 in Esperanto:
     * import { eoLocale } from 'date-fns/locale/eo'
     * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
     *   locale: eoLocale
     * })
     * //=> '2-a de julio 2014'
     *
     * @example
     * // Escape string by single quote characters:
     * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
     * //=> "3 o'clock"
     */

    function format$1(dirtyDate, dirtyFormatStr, dirtyOptions) {
      requiredArgs(2, arguments);
      var formatStr = String(dirtyFormatStr);
      var options = dirtyOptions || {};
      var locale$1 = options.locale || locale;
      var localeFirstWeekContainsDate = locale$1.options && locale$1.options.firstWeekContainsDate;
      var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger(localeFirstWeekContainsDate);
      var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger(options.firstWeekContainsDate); // Test if weekStartsOn is between 1 and 7 _and_ is not NaN

      if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
        throw new RangeError('firstWeekContainsDate must be between 1 and 7 inclusively');
      }

      var localeWeekStartsOn = locale$1.options && locale$1.options.weekStartsOn;
      var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger(localeWeekStartsOn);
      var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger(options.weekStartsOn); // Test if weekStartsOn is between 0 and 6 _and_ is not NaN

      if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
        throw new RangeError('weekStartsOn must be between 0 and 6 inclusively');
      }

      if (!locale$1.localize) {
        throw new RangeError('locale must contain localize property');
      }

      if (!locale$1.formatLong) {
        throw new RangeError('locale must contain formatLong property');
      }

      var originalDate = toDate$1(dirtyDate);

      if (!isValid(originalDate)) {
        throw new RangeError('Invalid time value');
      } // Convert the date in system timezone to the same date in UTC+00:00 timezone.
      // This ensures that when UTC functions will be implemented, locales will be compatible with them.
      // See an issue about UTC functions: https://github.com/date-fns/date-fns/issues/376


      var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
      var utcDate = subMilliseconds(originalDate, timezoneOffset);
      var formatterOptions = {
        firstWeekContainsDate: firstWeekContainsDate,
        weekStartsOn: weekStartsOn,
        locale: locale$1,
        _originalDate: originalDate
      };
      var result = formatStr.match(longFormattingTokensRegExp).map(function (substring) {
        var firstCharacter = substring[0];

        if (firstCharacter === 'p' || firstCharacter === 'P') {
          var longFormatter = longFormatters[firstCharacter];
          return longFormatter(substring, locale$1.formatLong, formatterOptions);
        }

        return substring;
      }).join('').match(formattingTokensRegExp).map(function (substring) {
        // Replace two single quote characters with one single quote character
        if (substring === "''") {
          return "'";
        }

        var firstCharacter = substring[0];

        if (firstCharacter === "'") {
          return cleanEscapedString(substring);
        }

        var formatter = formatters$1[firstCharacter];

        if (formatter) {
          if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, dirtyDate);
          }

          if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
            throwProtectedError(substring, dirtyFormatStr, dirtyDate);
          }

          return formatter(utcDate, substring, locale$1.localize, formatterOptions);
        }

        if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
          throw new RangeError('Format string contains an unescaped latin alphabet character `' + firstCharacter + '`');
        }

        return substring;
      }).join('');
      return result;
    }

    function cleanEscapedString(input) {
      return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
    }

    /**
     * Returns the formatted time zone name of the provided `timeZone` or the current
     * system time zone if omitted, accounting for DST according to the UTC value of
     * the date.
     */
    function tzIntlTimeZoneName(length, date, options) {
      var dtf = getDTF(length, options.timeZone, options.locale);
      return dtf.formatToParts ? partsTimeZone(dtf, date) : hackyTimeZone(dtf, date)
    }

    function partsTimeZone(dtf, date) {
      var formatted = dtf.formatToParts(date);
      return formatted[formatted.length - 1].value
    }

    function hackyTimeZone(dtf, date) {
      var formatted = dtf.format(date).replace(/\u200E/g, '');
      var tzNameMatch = / [\w-+ ]+$/.exec(formatted);
      return tzNameMatch ? tzNameMatch[0].substr(1) : ''
    }

    // If a locale has been provided `en-US` is used as a fallback in case it is an
    // invalid locale, otherwise the locale is left undefined to use the system locale.
    function getDTF(length, timeZone, locale) {
      if (locale && !locale.code) {
        throw new Error(
          "date-fns-tz error: Please set a language code on the locale object imported from date-fns, e.g. `locale.code = 'en-US'`"
        )
      }
      return new Intl.DateTimeFormat(locale ? [locale.code, 'en-US'] : undefined, {
        timeZone: timeZone,
        timeZoneName: length,
      })
    }

    /**
     * Returns the [year, month, day, hour, minute, seconds] tokens of the provided
     * `date` as it will be rendered in the `timeZone`.
     */
    function tzTokenizeDate(date, timeZone) {
      var dtf = getDateTimeFormat(timeZone);
      return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date)
    }

    var typeToPos = {
      year: 0,
      month: 1,
      day: 2,
      hour: 3,
      minute: 4,
      second: 5,
    };

    function partsOffset(dtf, date) {
      var formatted = dtf.formatToParts(date);
      var filled = [];
      for (var i = 0; i < formatted.length; i++) {
        var pos = typeToPos[formatted[i].type];

        if (pos >= 0) {
          filled[pos] = parseInt(formatted[i].value, 10);
        }
      }
      return filled
    }

    function hackyOffset(dtf, date) {
      var formatted = dtf.format(date).replace(/\u200E/g, '');
      var parsed = /(\d+)\/(\d+)\/(\d+),? (\d+):(\d+):(\d+)/.exec(formatted);
      // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed
      // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]
      return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]]
    }

    // Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used
    // to get deterministic local date/time output according to the `en-US` locale which
    // can be used to extract local time parts as necessary.
    var dtfCache = {};
    function getDateTimeFormat(timeZone) {
      if (!dtfCache[timeZone]) {
        // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`
        var testDateFormatted = new Intl.DateTimeFormat('en-US', {
          hour12: false,
          timeZone: 'America/New_York',
          year: 'numeric',
          month: '2-digit',
          day: '2-digit',
          hour: '2-digit',
          minute: '2-digit',
          second: '2-digit',
        }).format(new Date('2014-06-25T04:00:00.123Z'));
        var hourCycleSupported =
          testDateFormatted === '06/25/2014, 00:00:00' ||
          testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00';

        dtfCache[timeZone] = hourCycleSupported
          ? new Intl.DateTimeFormat('en-US', {
              hour12: false,
              timeZone: timeZone,
              year: 'numeric',
              month: '2-digit',
              day: '2-digit',
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit',
            })
          : new Intl.DateTimeFormat('en-US', {
              hourCycle: 'h23',
              timeZone: timeZone,
              year: 'numeric',
              month: '2-digit',
              day: '2-digit',
              hour: '2-digit',
              minute: '2-digit',
              second: '2-digit',
            });
      }
      return dtfCache[timeZone]
    }

    var MILLISECONDS_IN_HOUR$1 = 3600000;
    var MILLISECONDS_IN_MINUTE$2 = 60000;

    var patterns$1 = {
      timezone: /([Z+-].*)$/,
      timezoneZ: /^(Z)$/,
      timezoneHH: /^([+-])(\d{2})$/,
      timezoneHHMM: /^([+-])(\d{2}):?(\d{2})$/,
      timezoneIANA: /(UTC|(?:[a-zA-Z]+\/[a-zA-Z_-]+(?:\/[a-zA-Z_]+)?))$/,
    };

    // Parse various time zone offset formats to an offset in milliseconds
    function tzParseTimezone(timezoneString, date, isUtcDate) {
      var token;
      var absoluteOffset;

      // Z
      token = patterns$1.timezoneZ.exec(timezoneString);
      if (token) {
        return 0
      }

      var hours;

      // ±hh
      token = patterns$1.timezoneHH.exec(timezoneString);
      if (token) {
        hours = parseInt(token[2], 10);

        if (!validateTimezone()) {
          return NaN
        }

        absoluteOffset = hours * MILLISECONDS_IN_HOUR$1;
        return token[1] === '+' ? -absoluteOffset : absoluteOffset
      }

      // ±hh:mm or ±hhmm
      token = patterns$1.timezoneHHMM.exec(timezoneString);
      if (token) {
        hours = parseInt(token[2], 10);
        var minutes = parseInt(token[3], 10);

        if (!validateTimezone(hours, minutes)) {
          return NaN
        }

        absoluteOffset = hours * MILLISECONDS_IN_HOUR$1 + minutes * MILLISECONDS_IN_MINUTE$2;
        return token[1] === '+' ? -absoluteOffset : absoluteOffset
      }

      // IANA time zone
      token = patterns$1.timezoneIANA.exec(timezoneString);
      if (token) {
        date = new Date(date || Date.now());
        var utcDate = isUtcDate ? date : toUtcDate(date);

        var offset = calcOffset(utcDate, timezoneString);

        var fixedOffset = isUtcDate ? offset : fixOffset(date, offset, timezoneString);

        return -fixedOffset
      }

      return 0
    }

    function toUtcDate(date) {
      return new Date(
        Date.UTC(
          date.getFullYear(),
          date.getMonth(),
          date.getDate(),
          date.getHours(),
          date.getMinutes(),
          date.getSeconds(),
          date.getMilliseconds()
        )
      )
    }

    function calcOffset(date, timezoneString) {
      var tokens = tzTokenizeDate(date, timezoneString);

      var asUTC = Date.UTC(tokens[0], tokens[1] - 1, tokens[2], tokens[3] % 24, tokens[4], tokens[5]);

      var asTS = date.getTime();
      var over = asTS % 1000;
      asTS -= over >= 0 ? over : 1000 + over;
      return asUTC - asTS
    }

    function fixOffset(date, offset, timezoneString) {
      var localTS = date.getTime();

      // Our UTC time is just a guess because our offset is just a guess
      var utcGuess = localTS - offset;

      // Test whether the zone matches the offset for this ts
      var o2 = calcOffset(new Date(utcGuess), timezoneString);

      // If so, offset didn't change and we're done
      if (offset === o2) {
        return offset
      }

      // If not, change the ts by the difference in the offset
      utcGuess -= o2 - offset;

      // If that gives us the local time we want, we're done
      var o3 = calcOffset(new Date(utcGuess), timezoneString);
      if (o2 === o3) {
        return o2
      }

      // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time
      return Math.max(o2, o3)
    }

    function validateTimezone(hours, minutes) {
      if (minutes != null && (minutes < 0 || minutes > 59)) {
        return false
      }

      return true
    }

    var MILLISECONDS_IN_MINUTE$1 = 60 * 1000;

    var formatters = {
      // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
      X: function (date, token, localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = options.timeZone
          ? tzParseTimezone(options.timeZone, originalDate) / MILLISECONDS_IN_MINUTE$1
          : originalDate.getTimezoneOffset();

        if (timezoneOffset === 0) {
          return 'Z'
        }

        switch (token) {
          // Hours and optional minutes
          case 'X':
            return formatTimezoneWithOptionalMinutes(timezoneOffset)

          // Hours, minutes and optional seconds without `:` delimeter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XX`
          case 'XXXX':
          case 'XX': // Hours and minutes without `:` delimeter
            return formatTimezone(timezoneOffset)

          // Hours, minutes and optional seconds with `:` delimeter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `XXX`
          case 'XXXXX':
          case 'XXX': // Hours and minutes with `:` delimeter
          default:
            return formatTimezone(timezoneOffset, ':')
        }
      },

      // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
      x: function (date, token, localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = options.timeZone
          ? tzParseTimezone(options.timeZone, originalDate) / MILLISECONDS_IN_MINUTE$1
          : originalDate.getTimezoneOffset();

        switch (token) {
          // Hours and optional minutes
          case 'x':
            return formatTimezoneWithOptionalMinutes(timezoneOffset)

          // Hours, minutes and optional seconds without `:` delimeter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xx`
          case 'xxxx':
          case 'xx': // Hours and minutes without `:` delimeter
            return formatTimezone(timezoneOffset)

          // Hours, minutes and optional seconds with `:` delimeter
          // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
          // so this token always has the same output as `xxx`
          case 'xxxxx':
          case 'xxx': // Hours and minutes with `:` delimeter
          default:
            return formatTimezone(timezoneOffset, ':')
        }
      },

      // Timezone (GMT)
      O: function (date, token, localize, options) {
        var originalDate = options._originalDate || date;
        var timezoneOffset = options.timeZone
          ? tzParseTimezone(options.timeZone, originalDate) / MILLISECONDS_IN_MINUTE$1
          : originalDate.getTimezoneOffset();

        switch (token) {
          // Short
          case 'O':
          case 'OO':
          case 'OOO':
            return 'GMT' + formatTimezoneShort(timezoneOffset, ':')
          // Long
          case 'OOOO':
          default:
            return 'GMT' + formatTimezone(timezoneOffset, ':')
        }
      },

      // Timezone (specific non-location)
      z: function (date, token, localize, options) {
        var originalDate = options._originalDate || date;

        switch (token) {
          // Short
          case 'z':
          case 'zz':
          case 'zzz':
            return tzIntlTimeZoneName('short', originalDate, options)
          // Long
          case 'zzzz':
          default:
            return tzIntlTimeZoneName('long', originalDate, options)
        }
      },
    };

    function addLeadingZeros(number, targetLength) {
      var sign = number < 0 ? '-' : '';
      var output = Math.abs(number).toString();
      while (output.length < targetLength) {
        output = '0' + output;
      }
      return sign + output
    }

    function formatTimezone(offset, dirtyDelimeter) {
      var delimeter = dirtyDelimeter || '';
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
      var minutes = addLeadingZeros(absOffset % 60, 2);
      return sign + hours + delimeter + minutes
    }

    function formatTimezoneWithOptionalMinutes(offset, dirtyDelimeter) {
      if (offset % 60 === 0) {
        var sign = offset > 0 ? '-' : '+';
        return sign + addLeadingZeros(Math.abs(offset) / 60, 2)
      }
      return formatTimezone(offset, dirtyDelimeter)
    }

    function formatTimezoneShort(offset, dirtyDelimeter) {
      var sign = offset > 0 ? '-' : '+';
      var absOffset = Math.abs(offset);
      var hours = Math.floor(absOffset / 60);
      var minutes = absOffset % 60;
      if (minutes === 0) {
        return sign + String(hours)
      }
      var delimeter = dirtyDelimeter || '';
      return sign + String(hours) + delimeter + addLeadingZeros(minutes, 2)
    }

    var MILLISECONDS_IN_HOUR = 3600000;
    var MILLISECONDS_IN_MINUTE = 60000;
    var DEFAULT_ADDITIONAL_DIGITS = 2;

    var patterns = {
      dateTimeDelimeter: /[T ]/,
      plainTime: /:/,
      timeZoneDelimeter: /[Z ]/i,

      // year tokens
      YY: /^(\d{2})$/,
      YYY: [
        /^([+-]\d{2})$/, // 0 additional digits
        /^([+-]\d{3})$/, // 1 additional digit
        /^([+-]\d{4})$/, // 2 additional digits
      ],
      YYYY: /^(\d{4})/,
      YYYYY: [
        /^([+-]\d{4})/, // 0 additional digits
        /^([+-]\d{5})/, // 1 additional digit
        /^([+-]\d{6})/, // 2 additional digits
      ],

      // date tokens
      MM: /^-(\d{2})$/,
      DDD: /^-?(\d{3})$/,
      MMDD: /^-?(\d{2})-?(\d{2})$/,
      Www: /^-?W(\d{2})$/,
      WwwD: /^-?W(\d{2})-?(\d{1})$/,

      HH: /^(\d{2}([.,]\d*)?)$/,
      HHMM: /^(\d{2}):?(\d{2}([.,]\d*)?)$/,
      HHMMSS: /^(\d{2}):?(\d{2}):?(\d{2}([.,]\d*)?)$/,

      // timezone tokens (to identify the presence of a tz)
      timezone: /([Z+-].*| UTC|(?:[a-zA-Z]+\/[a-zA-Z_]+(?:\/[a-zA-Z_]+)?))$/,
    };

    /**
     * @name toDate
     * @category Common Helpers
     * @summary Convert the given argument to an instance of Date.
     *
     * @description
     * Convert the given argument to an instance of Date.
     *
     * If the argument is an instance of Date, the function returns its clone.
     *
     * If the argument is a number, it is treated as a timestamp.
     *
     * If an argument is a string, the function tries to parse it.
     * Function accepts complete ISO 8601 formats as well as partial implementations.
     * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
     * If the function cannot parse the string or the values are invalid, it returns Invalid Date.
     *
     * If the argument is none of the above, the function returns Invalid Date.
     *
     * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
     * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.
     *
     * @param {Date|String|Number} argument - the value to convert
     * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
     * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format
     * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.
     * @returns {Date} the parsed date in the local time zone
     * @throws {TypeError} 1 argument required
     * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
     *
     * @example
     * // Convert string '2014-02-11T11:30:30' to date:
     * var result = toDate('2014-02-11T11:30:30')
     * //=> Tue Feb 11 2014 11:30:30
     *
     * @example
     * // Convert string '+02014101' to date,
     * // if the additional number of digits in the extended year format is 1:
     * var result = toDate('+02014101', {additionalDigits: 1})
     * //=> Fri Apr 11 2014 00:00:00
     */
    function toDate(argument, dirtyOptions) {
      if (arguments.length < 1) {
        throw new TypeError('1 argument required, but only ' + arguments.length + ' present')
      }

      if (argument === null) {
        return new Date(NaN)
      }

      var options = dirtyOptions || {};

      var additionalDigits =
        options.additionalDigits == null
          ? DEFAULT_ADDITIONAL_DIGITS
          : toInteger(options.additionalDigits);
      if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {
        throw new RangeError('additionalDigits must be 0, 1 or 2')
      }

      // Clone the date
      if (
        argument instanceof Date ||
        (typeof argument === 'object' && Object.prototype.toString.call(argument) === '[object Date]')
      ) {
        // Prevent the date to lose the milliseconds when passed to new Date() in IE10
        return new Date(argument.getTime())
      } else if (
        typeof argument === 'number' ||
        Object.prototype.toString.call(argument) === '[object Number]'
      ) {
        return new Date(argument)
      } else if (
        !(
          typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]'
        )
      ) {
        return new Date(NaN)
      }

      var dateStrings = splitDateString(argument);

      var parseYearResult = parseYear(dateStrings.date, additionalDigits);
      var year = parseYearResult.year;
      var restDateString = parseYearResult.restDateString;

      var date = parseDate(restDateString, year);

      if (isNaN(date)) {
        return new Date(NaN)
      }

      if (date) {
        var timestamp = date.getTime();
        var time = 0;
        var offset;

        if (dateStrings.time) {
          time = parseTime(dateStrings.time);

          if (isNaN(time)) {
            return new Date(NaN)
          }
        }

        if (dateStrings.timezone || options.timeZone) {
          offset = tzParseTimezone(dateStrings.timezone || options.timeZone, new Date(timestamp + time));
          if (isNaN(offset)) {
            return new Date(NaN)
          }
        } else {
          // get offset accurate to hour in timezones that change offset
          offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time));
          offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time + offset));
        }

        return new Date(timestamp + time + offset)
      } else {
        return new Date(NaN)
      }
    }

    function splitDateString(dateString) {
      var dateStrings = {};
      var array = dateString.split(patterns.dateTimeDelimeter);
      var timeString;

      if (patterns.plainTime.test(array[0])) {
        dateStrings.date = null;
        timeString = array[0];
      } else {
        dateStrings.date = array[0];
        timeString = array[1];
        dateStrings.timezone = array[2];
        if (patterns.timeZoneDelimeter.test(dateStrings.date)) {
          dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0];
          timeString = dateString.substr(dateStrings.date.length, dateString.length);
        }
      }

      if (timeString) {
        var token = patterns.timezone.exec(timeString);
        if (token) {
          dateStrings.time = timeString.replace(token[1], '');
          dateStrings.timezone = token[1];
        } else {
          dateStrings.time = timeString;
        }
      }

      return dateStrings
    }

    function parseYear(dateString, additionalDigits) {
      var patternYYY = patterns.YYY[additionalDigits];
      var patternYYYYY = patterns.YYYYY[additionalDigits];

      var token;

      // YYYY or ±YYYYY
      token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString);
      if (token) {
        var yearString = token[1];
        return {
          year: parseInt(yearString, 10),
          restDateString: dateString.slice(yearString.length),
        }
      }

      // YY or ±YYY
      token = patterns.YY.exec(dateString) || patternYYY.exec(dateString);
      if (token) {
        var centuryString = token[1];
        return {
          year: parseInt(centuryString, 10) * 100,
          restDateString: dateString.slice(centuryString.length),
        }
      }

      // Invalid ISO-formatted year
      return {
        year: null,
      }
    }

    function parseDate(dateString, year) {
      // Invalid ISO-formatted year
      if (year === null) {
        return null
      }

      var token;
      var date;
      var month;
      var week;

      // YYYY
      if (dateString.length === 0) {
        date = new Date(0);
        date.setUTCFullYear(year);
        return date
      }

      // YYYY-MM
      token = patterns.MM.exec(dateString);
      if (token) {
        date = new Date(0);
        month = parseInt(token[1], 10) - 1;

        if (!validateDate(year, month)) {
          return new Date(NaN)
        }

        date.setUTCFullYear(year, month);
        return date
      }

      // YYYY-DDD or YYYYDDD
      token = patterns.DDD.exec(dateString);
      if (token) {
        date = new Date(0);
        var dayOfYear = parseInt(token[1], 10);

        if (!validateDayOfYearDate(year, dayOfYear)) {
          return new Date(NaN)
        }

        date.setUTCFullYear(year, 0, dayOfYear);
        return date
      }

      // yyyy-MM-dd or YYYYMMDD
      token = patterns.MMDD.exec(dateString);
      if (token) {
        date = new Date(0);
        month = parseInt(token[1], 10) - 1;
        var day = parseInt(token[2], 10);

        if (!validateDate(year, month, day)) {
          return new Date(NaN)
        }

        date.setUTCFullYear(year, month, day);
        return date
      }

      // YYYY-Www or YYYYWww
      token = patterns.Www.exec(dateString);
      if (token) {
        week = parseInt(token[1], 10) - 1;

        if (!validateWeekDate(year, week)) {
          return new Date(NaN)
        }

        return dayOfISOWeekYear(year, week)
      }

      // YYYY-Www-D or YYYYWwwD
      token = patterns.WwwD.exec(dateString);
      if (token) {
        week = parseInt(token[1], 10) - 1;
        var dayOfWeek = parseInt(token[2], 10) - 1;

        if (!validateWeekDate(year, week, dayOfWeek)) {
          return new Date(NaN)
        }

        return dayOfISOWeekYear(year, week, dayOfWeek)
      }

      // Invalid ISO-formatted date
      return null
    }

    function parseTime(timeString) {
      var token;
      var hours;
      var minutes;

      // hh
      token = patterns.HH.exec(timeString);
      if (token) {
        hours = parseFloat(token[1].replace(',', '.'));

        if (!validateTime(hours)) {
          return NaN
        }

        return (hours % 24) * MILLISECONDS_IN_HOUR
      }

      // hh:mm or hhmm
      token = patterns.HHMM.exec(timeString);
      if (token) {
        hours = parseInt(token[1], 10);
        minutes = parseFloat(token[2].replace(',', '.'));

        if (!validateTime(hours, minutes)) {
          return NaN
        }

        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE
      }

      // hh:mm:ss or hhmmss
      token = patterns.HHMMSS.exec(timeString);
      if (token) {
        hours = parseInt(token[1], 10);
        minutes = parseInt(token[2], 10);
        var seconds = parseFloat(token[3].replace(',', '.'));

        if (!validateTime(hours, minutes, seconds)) {
          return NaN
        }

        return (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000
      }

      // Invalid ISO-formatted time
      return null
    }

    function dayOfISOWeekYear(isoWeekYear, week, day) {
      week = week || 0;
      day = day || 0;
      var date = new Date(0);
      date.setUTCFullYear(isoWeekYear, 0, 4);
      var fourthOfJanuaryDay = date.getUTCDay() || 7;
      var diff = week * 7 + day + 1 - fourthOfJanuaryDay;
      date.setUTCDate(date.getUTCDate() + diff);
      return date
    }

    // Validation functions

    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

    function isLeapYearIndex(year) {
      return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)
    }

    function validateDate(year, month, date) {
      if (month < 0 || month > 11) {
        return false
      }

      if (date != null) {
        if (date < 1) {
          return false
        }

        var isLeapYear = isLeapYearIndex(year);
        if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {
          return false
        }
        if (!isLeapYear && date > DAYS_IN_MONTH[month]) {
          return false
        }
      }

      return true
    }

    function validateDayOfYearDate(year, dayOfYear) {
      if (dayOfYear < 1) {
        return false
      }

      var isLeapYear = isLeapYearIndex(year);
      if (isLeapYear && dayOfYear > 366) {
        return false
      }
      if (!isLeapYear && dayOfYear > 365) {
        return false
      }

      return true
    }

    function validateWeekDate(year, week, day) {
      if (week < 0 || week > 52) {
        return false
      }

      if (day != null && (day < 0 || day > 6)) {
        return false
      }

      return true
    }

    function validateTime(hours, minutes, seconds) {
      if (hours != null && (hours < 0 || hours >= 25)) {
        return false
      }

      if (minutes != null && (minutes < 0 || minutes >= 60)) {
        return false
      }

      if (seconds != null && (seconds < 0 || seconds >= 60)) {
        return false
      }

      return true
    }

    var tzFormattingTokensRegExp = /([xXOz]+)|''|'(''|[^'])+('|$)/g;

    /**
     * @name format
     * @category Common Helpers
     * @summary Format the date.
     *
     * @description
     * Return the formatted date string in the given format. The result may vary by locale.
     *
     * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
     * > See: https://git.io/fxCyr
     *
     * The characters wrapped between two single quotes characters (') are escaped.
     * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
     * (see the last example)
     *
     * Format of the string is based on Unicode Technical Standard #35:
     * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
     * with a few additions (see note 7 below the table).
     *
     * Accepted patterns:
     * | Unit                            | Pattern | Result examples                   | Notes |
     * |---------------------------------|---------|-----------------------------------|-------|
     * | Era                             | G..GGG  | AD, BC                            |       |
     * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
     * |                                 | GGGGG   | A, B                              |       |
     * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
     * |                                 | yy      | 44, 01, 00, 17                    | 5     |
     * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
     * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
     * |                                 | yyyyy   | ...                               | 3,5   |
     * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
     * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
     * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
     * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
     * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
     * |                                 | YYYYY   | ...                               | 3,5   |
     * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
     * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
     * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
     * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
     * |                                 | RRRRR   | ...                               | 3,5,7 |
     * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
     * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
     * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
     * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
     * |                                 | uuuuu   | ...                               | 3,5   |
     * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
     * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | QQ      | 01, 02, 03, 04                    |       |
     * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
     * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
     * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
     * |                                 | qq      | 01, 02, 03, 04                    |       |
     * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
     * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
     * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
     * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
     * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | MM      | 01, 02, ..., 12                   |       |
     * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
     * |                                 | MMMM    | January, February, ..., December  | 2     |
     * |                                 | MMMMM   | J, F, ..., D                      |       |
     * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
     * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
     * |                                 | LL      | 01, 02, ..., 12                   |       |
     * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
     * |                                 | LLLL    | January, February, ..., December  | 2     |
     * |                                 | LLLLL   | J, F, ..., D                      |       |
     * | Local week of year              | w       | 1, 2, ..., 53                     |       |
     * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | ww      | 01, 02, ..., 53                   |       |
     * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
     * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
     * |                                 | II      | 01, 02, ..., 53                   | 7     |
     * | Day of month                    | d       | 1, 2, ..., 31                     |       |
     * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
     * |                                 | dd      | 01, 02, ..., 31                   |       |
     * | Day of year                     | D       | 1, 2, ..., 365, 366               | 8     |
     * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
     * |                                 | DD      | 01, 02, ..., 365, 366             | 8     |
     * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
     * |                                 | DDDD    | ...                               | 3     |
     * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Su            |       |
     * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
     * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
     * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
     * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
     * |                                 | ii      | 01, 02, ..., 07                   | 7     |
     * |                                 | iii     | Mon, Tue, Wed, ..., Su            | 7     |
     * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
     * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
     * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Su, Sa        | 7     |
     * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
     * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | ee      | 02, 03, ..., 01                   |       |
     * |                                 | eee     | Mon, Tue, Wed, ..., Su            |       |
     * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
     * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
     * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
     * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
     * |                                 | cc      | 02, 03, ..., 01                   |       |
     * |                                 | ccc     | Mon, Tue, Wed, ..., Su            |       |
     * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
     * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
     * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Su, Sa        |       |
     * | AM, PM                          | a..aaa  | AM, PM                            |       |
     * |                                 | aaaa    | a.m., p.m.                        | 2     |
     * |                                 | aaaaa   | a, p                              |       |
     * | AM, PM, noon, midnight          | b..bbb  | AM, PM, noon, midnight            |       |
     * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
     * |                                 | bbbbb   | a, p, n, mi                       |       |
     * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
     * |                                 | BBBB    | at night, in the morning, ...     | 2     |
     * |                                 | BBBBB   | at night, in the morning, ...     |       |
     * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
     * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
     * |                                 | hh      | 01, 02, ..., 11, 12               |       |
     * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
     * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
     * |                                 | HH      | 00, 01, 02, ..., 23               |       |
     * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
     * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
     * |                                 | KK      | 1, 2, ..., 11, 0                  |       |
     * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
     * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
     * |                                 | kk      | 24, 01, 02, ..., 23               |       |
     * | Minute                          | m       | 0, 1, ..., 59                     |       |
     * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | mm      | 00, 01, ..., 59                   |       |
     * | Second                          | s       | 0, 1, ..., 59                     |       |
     * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
     * |                                 | ss      | 00, 01, ..., 59                   |       |
     * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
     * |                                 | SS      | 00, 01, ..., 99                   |       |
     * |                                 | SSS     | 000, 0001, ..., 999               |       |
     * |                                 | SSSS    | ...                               | 3     |
     * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
     * |                                 | XX      | -0800, +0530, Z                   |       |
     * |                                 | XXX     | -08:00, +05:30, Z                 |       |
     * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
     * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
     * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
     * |                                 | xx      | -0800, +0530, +0000               |       |
     * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
     * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
     * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
     * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
     * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
     * | Timezone (specific non-locat.)  | z...zzz | PDT, EST, CEST                    | 6     |
     * |                                 | zzzz    | Pacific Daylight Time             | 2,6   |
     * | Seconds timestamp               | t       | 512969520                         | 7     |
     * |                                 | tt      | ...                               | 3,7   |
     * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
     * |                                 | TT      | ...                               | 3,7   |
     * | Long localized date             | P       | 05/29/1453                        | 7     |
     * |                                 | PP      | May 29, 1453                      | 7     |
     * |                                 | PPP     | May 29th, 1453                    | 7     |
     * |                                 | PPPP    | Sunday, May 29th, 1453            | 2,7   |
     * | Long localized time             | p       | 12:00 AM                          | 7     |
     * |                                 | pp      | 12:00:00 AM                       | 7     |
     * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
     * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
     * | Combination of date and time    | Pp      | 05/29/1453, 12:00 AM              | 7     |
     * |                                 | PPpp    | May 29, 1453, 12:00:00 AM         | 7     |
     * |                                 | PPPppp  | May 29th, 1453 at ...             | 7     |
     * |                                 | PPPPpppp| Sunday, May 29th, 1453 at ...     | 2,7   |
     * Notes:
     * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
     *    are the same as "stand-alone" units, but are different in some languages.
     *    "Formatting" units are declined according to the rules of the language
     *    in the context of a date. "Stand-alone" units are always nominative singular:
     *
     *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
     *
     *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
     *
     * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
     *    the single quote characters (see below).
     *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
     *    the output will be the same as default pattern for this unit, usually
     *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
     *    are marked with "2" in the last column of the table.
     *
     *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
     *
     *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
     *
     * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
     *    The output will be padded with zeros to match the length of the pattern.
     *
     *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
     *
     * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
     *    These tokens represent the shortest form of the quarter.
     *
     * 5. The main difference between `y` and `u` patterns are B.C. years:
     *
     *    | Year | `y` | `u` |
     *    |------|-----|-----|
     *    | AC 1 |   1 |   1 |
     *    | BC 1 |   1 |   0 |
     *    | BC 2 |   2 |  -1 |
     *
     *    Also `yy` always returns the last two digits of a year,
     *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
     *
     *    | Year | `yy` | `uu` |
     *    |------|------|------|
     *    | 1    |   01 |   01 |
     *    | 14   |   14 |   14 |
     *    | 376  |   76 |  376 |
     *    | 1453 |   53 | 1453 |
     *
     *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
     *    except local week-numbering years are dependent on `options.weekStartsOn`
     *    and `options.firstWeekContainsDate` (compare [getISOWeekYear]{@link https://date-fns.org/docs/getISOWeekYear}
     *    and [getWeekYear]{@link https://date-fns.org/docs/getWeekYear}).
     *
     * 6. Specific non-location timezones are created using the Intl browser API. The output is determined by the
     *    preferred standard of the current locale (en-US by default) which may not always give the expected result.
     *    For this reason it is recommended to supply a `locale` in the format options when formatting a time zone name.
     *
     * 7. These patterns are not in the Unicode Technical Standard #35:
     *    - `i`: ISO day of week
     *    - `I`: ISO week of year
     *    - `R`: ISO week-numbering year
     *    - `t`: seconds timestamp
     *    - `T`: milliseconds timestamp
     *    - `o`: ordinal number modifier
     *    - `P`: long localized date
     *    - `p`: long localized time
     *
     * 8. These tokens are often confused with others. See: https://git.io/fxCyr
     *
     *
     * ### v2.0.0 breaking changes:
     *
     * - [Changes that are common for the whole
     *   library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).
     *
     * - The second argument is now required for the sake of explicitness.
     *
     *   ```javascript
     *   // Before v2.0.0
     *   format(new Date(2016, 0, 1))
     *
     *   // v2.0.0 onward
     *   format(new Date(2016, 0, 1), "yyyy-MM-dd'T'HH:mm:ss.SSSxxx")
     *   ```
     *
     * - New format string API for `format` function
     *   which is based on [Unicode Technical Standard
     *   #35](https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table). See [this
     *   post](https://blog.date-fns.org/post/unicode-tokens-in-date-fns-v2-sreatyki91jg) for more details.
     *
     * - Characters are now escaped using single quote symbols (`'`) instead of square brackets.
     *
     * @param {Date|String|Number} date - the original date
     * @param {String} format - the string of tokens
     * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}
     * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link
     *   https://date-fns.org/docs/toDate}
     * @param {0|1|2|3|4|5|6} [options.weekStartsOn=0] - the index of the first day of the week (0 - Sunday)
     * @param {Number} [options.firstWeekContainsDate=1] - the day of January, which is
     * @param {Locale} [options.locale=defaultLocale] - the locale object. See
     *   [Locale]{@link https://date-fns.org/docs/Locale}
     * @param {Boolean} [options.awareOfUnicodeTokens=false] - if true, allows usage of Unicode tokens causes confusion:
     *   - Some of the day of year tokens (`D`, `DD`) that are confused with the day of month tokens (`d`, `dd`).
     *   - Some of the local week-numbering year tokens (`YY`, `YYYY`) that are confused with the calendar year tokens
     *   (`yy`, `yyyy`). See: https://git.io/fxCyr
     * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.
     * @returns {String} the formatted date string
     * @throws {TypeError} 2 arguments required
     * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2
     * @throws {RangeError} `options.locale` must contain `localize` property
     * @throws {RangeError} `options.locale` must contain `formatLong` property
     * @throws {RangeError} `options.weekStartsOn` must be between 0 and 6
     * @throws {RangeError} `options.firstWeekContainsDate` must be between 1 and 7
     * @throws {RangeError} `options.awareOfUnicodeTokens` must be set to `true` to use `XX` token; see:
     *   https://git.io/fxCyr
     *
     * @example
     * // Represent 11 February 2014 in middle-endian format:
     * var result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
     * //=> '02/11/2014'
     *
     * @example
     * // Represent 2 July 2014 in Esperanto:
     * import { eoLocale } from 'date-fns/esm/locale/eo'
     * var result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
     *   locale: eoLocale
     * })
     * //=> '2-a de julio 2014'
     *
     * @example
     * // Escape string by single quote characters:
     * var result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
     * //=> "3 o'clock"
     */
    function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
      var formatStr = String(dirtyFormatStr);
      var options = dirtyOptions || {};

      var matches = formatStr.match(tzFormattingTokensRegExp);
      if (matches) {
        var date = toDate(dirtyDate, options);
        formatStr = matches.reduce(function (result, token) {
          return token[0] === "'"
            ? result
            : result.replace(token, "'" + formatters[token[0]](date, token, null, options) + "'")
        }, formatStr);
      }

      return format$1(dirtyDate, formatStr, options)
    }

    /* src/components/Timestamp.svelte generated by Svelte v3.40.2 */

    const { console: console_1$1 } = globals;
    const file$6 = "src/components/Timestamp.svelte";

    function create_fragment$6(ctx) {
    	let span;
    	let t0;
    	let time_1;
    	let t1;
    	let time_1_datetime_value;
    	let span_aria_hidden_value;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text("Water conditions: ");
    			time_1 = element("time");
    			t1 = text(/*timeFormatted*/ ctx[2]);
    			this.h();
    		},
    		l: function claim(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true, "aria-hidden": true });
    			var span_nodes = children(span);
    			t0 = claim_text(span_nodes, "Water conditions: ");
    			time_1 = claim_element(span_nodes, "TIME", { datetime: true });
    			var time_1_nodes = children(time_1);
    			t1 = claim_text(time_1_nodes, /*timeFormatted*/ ctx[2]);
    			time_1_nodes.forEach(detach_dev);
    			span_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(time_1, "datetime", time_1_datetime_value = /*time*/ ctx[1].getTime());
    			add_location(time_1, file$6, 61, 19, 1119);
    			attr_dev(span, "class", "timestamp svelte-nxy80b");
    			attr_dev(span, "aria-hidden", span_aria_hidden_value = !/*updated*/ ctx[0]);
    			toggle_class(span, "visible", /*updated*/ ctx[0]);
    			add_location(span, file$6, 60, 0, 1028);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, span, anchor);
    			append_hydration_dev(span, t0);
    			append_hydration_dev(span, time_1);
    			append_hydration_dev(time_1, t1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*timeFormatted*/ 4) set_data_dev(t1, /*timeFormatted*/ ctx[2]);

    			if (dirty & /*time*/ 2 && time_1_datetime_value !== (time_1_datetime_value = /*time*/ ctx[1].getTime())) {
    				attr_dev(time_1, "datetime", time_1_datetime_value);
    			}

    			if (dirty & /*updated*/ 1 && span_aria_hidden_value !== (span_aria_hidden_value = !/*updated*/ ctx[0])) {
    				attr_dev(span, "aria-hidden", span_aria_hidden_value);
    			}

    			if (dirty & /*updated*/ 1) {
    				toggle_class(span, "visible", /*updated*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const DATE_FORMAT$1 = "d, yyyy";
    const TIME_FORMAT$1 = "h:mm aa zzz";

    function instance$6($$self, $$props, $$invalidate) {
    	let time;
    	let timeFormatted;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Timestamp', slots, []);
    	let { updated = "" } = $$props;

    	const AP_MONTHS = [
    		"Jan.",
    		"Feb.",
    		"March",
    		"April",
    		"May",
    		"June",
    		"July",
    		"Aug.",
    		"Sept.",
    		"Oct.",
    		"Nov.",
    		"Dec."
    	];

    	function formatTime(u) {
    		if (!updated) return;

    		try {
    			let date = format(u, DATE_FORMAT$1);
    			let time = format(u, TIME_FORMAT$1);
    			let month = AP_MONTHS[u.getMonth()];
    			let formatted = `${time}, ${month} ${date}`;
    			return formatted;
    		} catch(e) {
    			// Invalid timestamp
    			console.error(e);

    			return "";
    		}
    	}

    	const writable_props = ['updated'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Timestamp> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('updated' in $$props) $$invalidate(0, updated = $$props.updated);
    	};

    	$$self.$capture_state = () => ({
    		format,
    		updated,
    		DATE_FORMAT: DATE_FORMAT$1,
    		TIME_FORMAT: TIME_FORMAT$1,
    		AP_MONTHS,
    		formatTime,
    		time,
    		timeFormatted
    	});

    	$$self.$inject_state = $$props => {
    		if ('updated' in $$props) $$invalidate(0, updated = $$props.updated);
    		if ('time' in $$props) $$invalidate(1, time = $$props.time);
    		if ('timeFormatted' in $$props) $$invalidate(2, timeFormatted = $$props.timeFormatted);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*updated*/ 1) {
    			$$invalidate(1, time = new Date(updated) || "");
    		}

    		if ($$self.$$.dirty & /*time*/ 2) {
    			$$invalidate(2, timeFormatted = formatTime(time));
    		}
    	};

    	return [updated, time, timeFormatted];
    }

    class Timestamp extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$6, create_fragment$6, safe_not_equal, { updated: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Timestamp",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get updated() {
    		throw new Error("<Timestamp>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set updated(value) {
    		throw new Error("<Timestamp>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/CSO.svelte generated by Svelte v3.40.2 */
    const file$5 = "src/components/CSO.svelte";

    function create_fragment$5(ctx) {
    	let span;
    	let t0;
    	let time_1;
    	let t1;
    	let time_1_datetime_value;
    	let span_aria_hidden_value;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text("CSO, ");
    			time_1 = element("time");
    			t1 = text(/*timeFormatted*/ ctx[2]);
    			this.h();
    		},
    		l: function claim(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true, "aria-hidden": true });
    			var span_nodes = children(span);
    			t0 = claim_text(span_nodes, "CSO, ");
    			time_1 = claim_element(span_nodes, "TIME", { datetime: true });
    			var time_1_nodes = children(time_1);
    			t1 = claim_text(time_1_nodes, /*timeFormatted*/ ctx[2]);
    			time_1_nodes.forEach(detach_dev);
    			span_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(time_1, "datetime", time_1_datetime_value = /*time*/ ctx[1].getTime());
    			add_location(time_1, file$5, 58, 6, 974);
    			attr_dev(span, "class", "cso svelte-1gr82jb");
    			attr_dev(span, "aria-hidden", span_aria_hidden_value = !/*time*/ ctx[1]);
    			toggle_class(span, "visible", /*cso*/ ctx[0]);
    			add_location(span, file$5, 57, 0, 909);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, span, anchor);
    			append_hydration_dev(span, t0);
    			append_hydration_dev(span, time_1);
    			append_hydration_dev(time_1, t1);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*timeFormatted*/ 4) set_data_dev(t1, /*timeFormatted*/ ctx[2]);

    			if (dirty & /*time*/ 2 && time_1_datetime_value !== (time_1_datetime_value = /*time*/ ctx[1].getTime())) {
    				attr_dev(time_1, "datetime", time_1_datetime_value);
    			}

    			if (dirty & /*time*/ 2 && span_aria_hidden_value !== (span_aria_hidden_value = !/*time*/ ctx[1])) {
    				attr_dev(span, "aria-hidden", span_aria_hidden_value);
    			}

    			if (dirty & /*cso*/ 1) {
    				toggle_class(span, "visible", /*cso*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const DATE_FORMAT = "d";
    const TIME_FORMAT = "h:mm aa";

    function instance$5($$self, $$props, $$invalidate) {
    	let time;
    	let timeFormatted;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CSO', slots, []);
    	let { cso = "" } = $$props;

    	const AP_MONTHS = [
    		"Jan.",
    		"Feb.",
    		"March",
    		"April",
    		"May",
    		"June",
    		"July",
    		"Aug.",
    		"Sept.",
    		"Oct.",
    		"Nov.",
    		"Dec."
    	];

    	function formatTime(u) {
    		try {
    			let date = format(u, DATE_FORMAT);
    			let time = format(u, TIME_FORMAT);
    			let month = AP_MONTHS[u.getMonth()];
    			let formatted = `${time}, ${month} ${date}`;
    			return formatted;
    		} catch(e) {
    			// Invalid timestamp. Acknowledge and move on
    			return "";
    		}
    	}

    	const writable_props = ['cso'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CSO> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('cso' in $$props) $$invalidate(0, cso = $$props.cso);
    	};

    	$$self.$capture_state = () => ({
    		format,
    		cso,
    		DATE_FORMAT,
    		TIME_FORMAT,
    		AP_MONTHS,
    		formatTime,
    		time,
    		timeFormatted
    	});

    	$$self.$inject_state = $$props => {
    		if ('cso' in $$props) $$invalidate(0, cso = $$props.cso);
    		if ('time' in $$props) $$invalidate(1, time = $$props.time);
    		if ('timeFormatted' in $$props) $$invalidate(2, timeFormatted = $$props.timeFormatted);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*cso*/ 1) {
    			$$invalidate(1, time = new Date(cso) || "");
    		}

    		if ($$self.$$.dirty & /*time*/ 2) {
    			$$invalidate(2, timeFormatted = formatTime(time));
    		}
    	};

    	return [cso, time, timeFormatted];
    }

    class CSO$1 extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, { cso: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CSO",
    			options,
    			id: create_fragment$5.name
    		});
    	}

    	get cso() {
    		throw new Error("<CSO>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set cso(value) {
    		throw new Error("<CSO>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Gauge.svelte generated by Svelte v3.40.2 */

    const file$4 = "src/components/Gauge.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[16] = list[i][0];
    	child_ctx[17] = list[i][1];
    	return child_ctx;
    }

    // (160:2) {#each stops as [label, position]}
    function create_each_block$2(ctx) {
    	let li;
    	let t0_value = /*label*/ ctx[16] + "";
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t0 = text(t0_value);
    			t1 = space();
    			this.h();
    		},
    		l: function claim(nodes) {
    			li = claim_element(nodes, "LI", { class: true, style: true });
    			var li_nodes = children(li);
    			t0 = claim_text(li_nodes, t0_value);
    			t1 = claim_space(li_nodes);
    			li_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(li, "class", "stop svelte-tuq46r");
    			set_style(li, "left", /*position*/ ctx[17] + "%");
    			add_location(li, file$4, 160, 3, 2895);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, li, anchor);
    			append_hydration_dev(li, t0);
    			append_hydration_dev(li, t1);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(160:2) {#each stops as [label, position]}",
    		ctx
    	});

    	return block;
    }

    // (167:2) {#if average}
    function create_if_block_4(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			this.h();
    		},
    		l: function claim(nodes) {
    			span = claim_element(nodes, "SPAN", { style: true, class: true });
    			children(span).forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_style(span, "left", /*placeAvg*/ ctx[5] + "%");
    			attr_dev(span, "class", "tick tick--average svelte-tuq46r");
    			add_location(span, file$4, 167, 3, 3023);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, span, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*placeAvg*/ 32) {
    				set_style(span, "left", /*placeAvg*/ ctx[5] + "%");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(167:2) {#if average}",
    		ctx
    	});

    	return block;
    }

    // (170:2) {#if high}
    function create_if_block_3(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			this.h();
    		},
    		l: function claim(nodes) {
    			span = claim_element(nodes, "SPAN", { style: true, class: true });
    			children(span).forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_style(span, "left", /*placeHigh*/ ctx[8] + "%");
    			attr_dev(span, "class", "tick tick--high svelte-tuq46r");
    			add_location(span, file$4, 170, 3, 3110);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, span, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*placeHigh*/ 256) {
    				set_style(span, "left", /*placeHigh*/ ctx[8] + "%");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(170:2) {#if high}",
    		ctx
    	});

    	return block;
    }

    // (173:2) {#if low}
    function create_if_block_2$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			this.h();
    		},
    		l: function claim(nodes) {
    			span = claim_element(nodes, "SPAN", { style: true, class: true });
    			children(span).forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_style(span, "left", /*placeLow*/ ctx[7] + "%");
    			attr_dev(span, "class", "tick tick--low svelte-tuq46r");
    			add_location(span, file$4, 173, 3, 3193);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, span, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*placeLow*/ 128) {
    				set_style(span, "left", /*placeLow*/ ctx[7] + "%");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(173:2) {#if low}",
    		ctx
    	});

    	return block;
    }

    // (176:2) {#if value}
    function create_if_block_1$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			this.h();
    		},
    		l: function claim(nodes) {
    			span = claim_element(nodes, "SPAN", { style: true, class: true });
    			children(span).forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			set_style(span, "left", /*placeValue*/ ctx[6] + "%");
    			attr_dev(span, "class", "tick tick--value svelte-tuq46r");
    			add_location(span, file$4, 176, 3, 3276);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, span, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*placeValue*/ 64) {
    				set_style(span, "left", /*placeValue*/ ctx[6] + "%");
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(176:2) {#if value}",
    		ctx
    	});

    	return block;
    }

    // (185:3) {:else}
    function create_else_block(ctx) {
    	let span;
    	let t0;
    	let t1;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text("Average: ");
    			t1 = text(DEFAULT_LABEL_TEXT);
    			this.h();
    		},
    		l: function claim(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true });
    			var span_nodes = children(span);
    			t0 = claim_text(span_nodes, "Average: ");
    			t1 = claim_text(span_nodes, DEFAULT_LABEL_TEXT);
    			span_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(span, "class", "legend__text svelte-tuq46r");
    			add_location(span, file$4, 185, 4, 3535);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, span, anchor);
    			append_hydration_dev(span, t0);
    			append_hydration_dev(span, t1);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(185:3) {:else}",
    		ctx
    	});

    	return block;
    }

    // (183:3) {#if average}
    function create_if_block$4(ctx) {
    	let span;
    	let t0;
    	let t1;
    	let t2;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t0 = text("Average: ");
    			t1 = text(/*average*/ ctx[2]);
    			t2 = text(" ppb");
    			this.h();
    		},
    		l: function claim(nodes) {
    			span = claim_element(nodes, "SPAN", { class: true });
    			var span_nodes = children(span);
    			t0 = claim_text(span_nodes, "Average: ");
    			t1 = claim_text(span_nodes, /*average*/ ctx[2]);
    			t2 = claim_text(span_nodes, " ppb");
    			span_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(span, "class", "legend__text svelte-tuq46r");
    			add_location(span, file$4, 183, 4, 3463);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, span, anchor);
    			append_hydration_dev(span, t0);
    			append_hydration_dev(span, t1);
    			append_hydration_dev(span, t2);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*average*/ 4) set_data_dev(t1, /*average*/ ctx[2]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(183:3) {#if average}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let div1;
    	let ul0;
    	let t0;
    	let div0;
    	let t1;
    	let t2;
    	let t3;
    	let t4;
    	let ul1;
    	let li0;
    	let span0;
    	let t5;
    	let t6;
    	let li1;
    	let span1;
    	let t7;
    	let span2;
    	let t8;
    	let t9_value = getLabel(/*high*/ ctx[3]) + "";
    	let t9;
    	let t10;
    	let li2;
    	let span3;
    	let t11;
    	let span4;
    	let t12;
    	let t13_value = getLabel(/*low*/ ctx[4]) + "";
    	let t13;
    	let t14;
    	let li3;
    	let span5;
    	let t15;
    	let span6;
    	let t16;
    	let t17_value = getLabel(/*value*/ ctx[1]) + "";
    	let t17;
    	let div1_id_value;
    	let each_value = /*stops*/ ctx[9];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$2(get_each_context$2(ctx, each_value, i));
    	}

    	let if_block0 = /*average*/ ctx[2] && create_if_block_4(ctx);
    	let if_block1 = /*high*/ ctx[3] && create_if_block_3(ctx);
    	let if_block2 = /*low*/ ctx[4] && create_if_block_2$1(ctx);
    	let if_block3 = /*value*/ ctx[1] && create_if_block_1$1(ctx);

    	function select_block_type(ctx, dirty) {
    		if (/*average*/ ctx[2]) return create_if_block$4;
    		return create_else_block;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block4 = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			ul0 = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t0 = space();
    			div0 = element("div");
    			if (if_block0) if_block0.c();
    			t1 = space();
    			if (if_block1) if_block1.c();
    			t2 = space();
    			if (if_block2) if_block2.c();
    			t3 = space();
    			if (if_block3) if_block3.c();
    			t4 = space();
    			ul1 = element("ul");
    			li0 = element("li");
    			span0 = element("span");
    			t5 = space();
    			if_block4.c();
    			t6 = space();
    			li1 = element("li");
    			span1 = element("span");
    			t7 = space();
    			span2 = element("span");
    			t8 = text("High: ");
    			t9 = text(t9_value);
    			t10 = space();
    			li2 = element("li");
    			span3 = element("span");
    			t11 = space();
    			span4 = element("span");
    			t12 = text("Low: ");
    			t13 = text(t13_value);
    			t14 = space();
    			li3 = element("li");
    			span5 = element("span");
    			t15 = space();
    			span6 = element("span");
    			t16 = text("Latest: ");
    			t17 = text(t17_value);
    			this.h();
    		},
    		l: function claim(nodes) {
    			div1 = claim_element(nodes, "DIV", { id: true, class: true });
    			var div1_nodes = children(div1);
    			ul0 = claim_element(div1_nodes, "UL", { class: true });
    			var ul0_nodes = children(ul0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].l(ul0_nodes);
    			}

    			ul0_nodes.forEach(detach_dev);
    			t0 = claim_space(div1_nodes);
    			div0 = claim_element(div1_nodes, "DIV", { class: true });
    			var div0_nodes = children(div0);
    			if (if_block0) if_block0.l(div0_nodes);
    			t1 = claim_space(div0_nodes);
    			if (if_block1) if_block1.l(div0_nodes);
    			t2 = claim_space(div0_nodes);
    			if (if_block2) if_block2.l(div0_nodes);
    			t3 = claim_space(div0_nodes);
    			if (if_block3) if_block3.l(div0_nodes);
    			div0_nodes.forEach(detach_dev);
    			t4 = claim_space(div1_nodes);
    			ul1 = claim_element(div1_nodes, "UL", { class: true });
    			var ul1_nodes = children(ul1);
    			li0 = claim_element(ul1_nodes, "LI", { class: true });
    			var li0_nodes = children(li0);
    			span0 = claim_element(li0_nodes, "SPAN", { class: true });
    			children(span0).forEach(detach_dev);
    			t5 = claim_space(li0_nodes);
    			if_block4.l(li0_nodes);
    			li0_nodes.forEach(detach_dev);
    			t6 = claim_space(ul1_nodes);
    			li1 = claim_element(ul1_nodes, "LI", { class: true });
    			var li1_nodes = children(li1);
    			span1 = claim_element(li1_nodes, "SPAN", { class: true });
    			children(span1).forEach(detach_dev);
    			t7 = claim_space(li1_nodes);
    			span2 = claim_element(li1_nodes, "SPAN", { class: true });
    			var span2_nodes = children(span2);
    			t8 = claim_text(span2_nodes, "High: ");
    			t9 = claim_text(span2_nodes, t9_value);
    			span2_nodes.forEach(detach_dev);
    			li1_nodes.forEach(detach_dev);
    			t10 = claim_space(ul1_nodes);
    			li2 = claim_element(ul1_nodes, "LI", { class: true });
    			var li2_nodes = children(li2);
    			span3 = claim_element(li2_nodes, "SPAN", { class: true });
    			children(span3).forEach(detach_dev);
    			t11 = claim_space(li2_nodes);
    			span4 = claim_element(li2_nodes, "SPAN", { class: true });
    			var span4_nodes = children(span4);
    			t12 = claim_text(span4_nodes, "Low: ");
    			t13 = claim_text(span4_nodes, t13_value);
    			span4_nodes.forEach(detach_dev);
    			li2_nodes.forEach(detach_dev);
    			t14 = claim_space(ul1_nodes);
    			li3 = claim_element(ul1_nodes, "LI", { class: true });
    			var li3_nodes = children(li3);
    			span5 = claim_element(li3_nodes, "SPAN", { class: true });
    			children(span5).forEach(detach_dev);
    			t15 = claim_space(li3_nodes);
    			span6 = claim_element(li3_nodes, "SPAN", { class: true });
    			var span6_nodes = children(span6);
    			t16 = claim_text(span6_nodes, "Latest: ");
    			t17 = claim_text(span6_nodes, t17_value);
    			span6_nodes.forEach(detach_dev);
    			li3_nodes.forEach(detach_dev);
    			ul1_nodes.forEach(detach_dev);
    			div1_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(ul0, "class", "stops svelte-tuq46r");
    			add_location(ul0, file$4, 158, 1, 2836);
    			attr_dev(div0, "class", "gauge__chart svelte-tuq46r");
    			add_location(div0, file$4, 165, 1, 2977);
    			attr_dev(span0, "class", "tick tick--average svelte-tuq46r");
    			add_location(span0, file$4, 181, 3, 3406);
    			attr_dev(li0, "class", "legend__item svelte-tuq46r");
    			add_location(li0, file$4, 180, 2, 3377);
    			attr_dev(span1, "class", "tick tick--high svelte-tuq46r");
    			add_location(span1, file$4, 189, 3, 3626);
    			attr_dev(span2, "class", "legend__text svelte-tuq46r");
    			add_location(span2, file$4, 190, 3, 3662);
    			attr_dev(li1, "class", "svelte-tuq46r");
    			add_location(li1, file$4, 188, 2, 3618);
    			attr_dev(span3, "class", "tick tick--low svelte-tuq46r");
    			add_location(span3, file$4, 193, 3, 3737);
    			attr_dev(span4, "class", "legend__text svelte-tuq46r");
    			add_location(span4, file$4, 194, 3, 3772);
    			attr_dev(li2, "class", "svelte-tuq46r");
    			add_location(li2, file$4, 192, 2, 3729);
    			attr_dev(span5, "class", "tick tick--value svelte-tuq46r");
    			add_location(span5, file$4, 197, 3, 3845);
    			attr_dev(span6, "class", "legend__text svelte-tuq46r");
    			add_location(span6, file$4, 198, 3, 3882);
    			attr_dev(li3, "class", "svelte-tuq46r");
    			add_location(li3, file$4, 196, 2, 3837);
    			attr_dev(ul1, "class", "legend svelte-tuq46r");
    			add_location(ul1, file$4, 179, 1, 3355);
    			attr_dev(div1, "id", div1_id_value = "" + (/*uniqueSlug*/ ctx[0] + "-gauge"));
    			attr_dev(div1, "class", "gauge svelte-tuq46r");
    			add_location(div1, file$4, 157, 0, 2791);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, div1, anchor);
    			append_hydration_dev(div1, ul0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(ul0, null);
    			}

    			append_hydration_dev(div1, t0);
    			append_hydration_dev(div1, div0);
    			if (if_block0) if_block0.m(div0, null);
    			append_hydration_dev(div0, t1);
    			if (if_block1) if_block1.m(div0, null);
    			append_hydration_dev(div0, t2);
    			if (if_block2) if_block2.m(div0, null);
    			append_hydration_dev(div0, t3);
    			if (if_block3) if_block3.m(div0, null);
    			append_hydration_dev(div1, t4);
    			append_hydration_dev(div1, ul1);
    			append_hydration_dev(ul1, li0);
    			append_hydration_dev(li0, span0);
    			append_hydration_dev(li0, t5);
    			if_block4.m(li0, null);
    			append_hydration_dev(ul1, t6);
    			append_hydration_dev(ul1, li1);
    			append_hydration_dev(li1, span1);
    			append_hydration_dev(li1, t7);
    			append_hydration_dev(li1, span2);
    			append_hydration_dev(span2, t8);
    			append_hydration_dev(span2, t9);
    			append_hydration_dev(ul1, t10);
    			append_hydration_dev(ul1, li2);
    			append_hydration_dev(li2, span3);
    			append_hydration_dev(li2, t11);
    			append_hydration_dev(li2, span4);
    			append_hydration_dev(span4, t12);
    			append_hydration_dev(span4, t13);
    			append_hydration_dev(ul1, t14);
    			append_hydration_dev(ul1, li3);
    			append_hydration_dev(li3, span5);
    			append_hydration_dev(li3, t15);
    			append_hydration_dev(li3, span6);
    			append_hydration_dev(span6, t16);
    			append_hydration_dev(span6, t17);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*stops*/ 512) {
    				each_value = /*stops*/ ctx[9];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$2(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$2(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*average*/ ctx[2]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4(ctx);
    					if_block0.c();
    					if_block0.m(div0, t1);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*high*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_3(ctx);
    					if_block1.c();
    					if_block1.m(div0, t2);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (/*low*/ ctx[4]) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_2$1(ctx);
    					if_block2.c();
    					if_block2.m(div0, t3);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*value*/ ctx[1]) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_1$1(ctx);
    					if_block3.c();
    					if_block3.m(div0, null);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block4) {
    				if_block4.p(ctx, dirty);
    			} else {
    				if_block4.d(1);
    				if_block4 = current_block_type(ctx);

    				if (if_block4) {
    					if_block4.c();
    					if_block4.m(li0, null);
    				}
    			}

    			if (dirty & /*high*/ 8 && t9_value !== (t9_value = getLabel(/*high*/ ctx[3]) + "")) set_data_dev(t9, t9_value);
    			if (dirty & /*low*/ 16 && t13_value !== (t13_value = getLabel(/*low*/ ctx[4]) + "")) set_data_dev(t13, t13_value);
    			if (dirty & /*value*/ 2 && t17_value !== (t17_value = getLabel(/*value*/ ctx[1]) + "")) set_data_dev(t17, t17_value);

    			if (dirty & /*uniqueSlug*/ 1 && div1_id_value !== (div1_id_value = "" + (/*uniqueSlug*/ ctx[0] + "-gauge"))) {
    				attr_dev(div1, "id", div1_id_value);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if_block4.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const DEFAULT_LABEL_TEXT = "-";

    function getLabel(val) {
    	return val ? `${val} ppb` : DEFAULT_LABEL_TEXT;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let placeHigh;
    	let placeLow;
    	let placeValue;
    	let placeAvg;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Gauge', slots, []);
    	let { uniqueSlug } = $$props;
    	let { min } = $$props;
    	let { max } = $$props;
    	let { main_gauge_stops } = $$props;
    	let { value } = $$props;
    	let { average } = $$props;
    	let { high } = $$props;
    	let { low } = $$props;

    	// CALCULATE POSITIONS
    	let range = max - min;

    	let increment = range / main_gauge_stops;

    	function getStops() {
    		const s = [];

    		// Make an array of arrays:
    		// [
    		//  [stop label, stop left position]
    		// ]
    		for (let i = 0; i <= main_gauge_stops; i++) {
    			const label = increment * i + min;
    			const position = (label - min) / range * 100;
    			s.push([label, position]);
    		}

    		return s;
    	}

    	const stops = getStops();

    	const writable_props = [
    		'uniqueSlug',
    		'min',
    		'max',
    		'main_gauge_stops',
    		'value',
    		'average',
    		'high',
    		'low'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Gauge> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('uniqueSlug' in $$props) $$invalidate(0, uniqueSlug = $$props.uniqueSlug);
    		if ('min' in $$props) $$invalidate(10, min = $$props.min);
    		if ('max' in $$props) $$invalidate(11, max = $$props.max);
    		if ('main_gauge_stops' in $$props) $$invalidate(12, main_gauge_stops = $$props.main_gauge_stops);
    		if ('value' in $$props) $$invalidate(1, value = $$props.value);
    		if ('average' in $$props) $$invalidate(2, average = $$props.average);
    		if ('high' in $$props) $$invalidate(3, high = $$props.high);
    		if ('low' in $$props) $$invalidate(4, low = $$props.low);
    	};

    	$$self.$capture_state = () => ({
    		uniqueSlug,
    		min,
    		max,
    		main_gauge_stops,
    		value,
    		average,
    		high,
    		low,
    		range,
    		increment,
    		DEFAULT_LABEL_TEXT,
    		getStops,
    		stops,
    		getLabel,
    		placeAvg,
    		placeValue,
    		placeLow,
    		placeHigh
    	});

    	$$self.$inject_state = $$props => {
    		if ('uniqueSlug' in $$props) $$invalidate(0, uniqueSlug = $$props.uniqueSlug);
    		if ('min' in $$props) $$invalidate(10, min = $$props.min);
    		if ('max' in $$props) $$invalidate(11, max = $$props.max);
    		if ('main_gauge_stops' in $$props) $$invalidate(12, main_gauge_stops = $$props.main_gauge_stops);
    		if ('value' in $$props) $$invalidate(1, value = $$props.value);
    		if ('average' in $$props) $$invalidate(2, average = $$props.average);
    		if ('high' in $$props) $$invalidate(3, high = $$props.high);
    		if ('low' in $$props) $$invalidate(4, low = $$props.low);
    		if ('range' in $$props) $$invalidate(13, range = $$props.range);
    		if ('increment' in $$props) increment = $$props.increment;
    		if ('placeAvg' in $$props) $$invalidate(5, placeAvg = $$props.placeAvg);
    		if ('placeValue' in $$props) $$invalidate(6, placeValue = $$props.placeValue);
    		if ('placeLow' in $$props) $$invalidate(7, placeLow = $$props.placeLow);
    		if ('placeHigh' in $$props) $$invalidate(8, placeHigh = $$props.placeHigh);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*high, min*/ 1032) {
    			// These values are the CSS percentages used to place the icons on the gauge
    			$$invalidate(8, placeHigh = (high - min) / range * 100);
    		}

    		if ($$self.$$.dirty & /*low, min*/ 1040) {
    			$$invalidate(7, placeLow = (low - min) / range * 100);
    		}

    		if ($$self.$$.dirty & /*value, min*/ 1026) {
    			$$invalidate(6, placeValue = (value - min) / range * 100);
    		}

    		if ($$self.$$.dirty & /*average, min*/ 1028) {
    			$$invalidate(5, placeAvg = (average - min) / range * 100);
    		}
    	};

    	return [
    		uniqueSlug,
    		value,
    		average,
    		high,
    		low,
    		placeAvg,
    		placeValue,
    		placeLow,
    		placeHigh,
    		stops,
    		min,
    		max,
    		main_gauge_stops
    	];
    }

    class Gauge extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {
    			uniqueSlug: 0,
    			min: 10,
    			max: 11,
    			main_gauge_stops: 12,
    			value: 1,
    			average: 2,
    			high: 3,
    			low: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Gauge",
    			options,
    			id: create_fragment$4.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*uniqueSlug*/ ctx[0] === undefined && !('uniqueSlug' in props)) {
    			console.warn("<Gauge> was created without expected prop 'uniqueSlug'");
    		}

    		if (/*min*/ ctx[10] === undefined && !('min' in props)) {
    			console.warn("<Gauge> was created without expected prop 'min'");
    		}

    		if (/*max*/ ctx[11] === undefined && !('max' in props)) {
    			console.warn("<Gauge> was created without expected prop 'max'");
    		}

    		if (/*main_gauge_stops*/ ctx[12] === undefined && !('main_gauge_stops' in props)) {
    			console.warn("<Gauge> was created without expected prop 'main_gauge_stops'");
    		}

    		if (/*value*/ ctx[1] === undefined && !('value' in props)) {
    			console.warn("<Gauge> was created without expected prop 'value'");
    		}

    		if (/*average*/ ctx[2] === undefined && !('average' in props)) {
    			console.warn("<Gauge> was created without expected prop 'average'");
    		}

    		if (/*high*/ ctx[3] === undefined && !('high' in props)) {
    			console.warn("<Gauge> was created without expected prop 'high'");
    		}

    		if (/*low*/ ctx[4] === undefined && !('low' in props)) {
    			console.warn("<Gauge> was created without expected prop 'low'");
    		}
    	}

    	get uniqueSlug() {
    		throw new Error("<Gauge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set uniqueSlug(value) {
    		throw new Error("<Gauge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get min() {
    		throw new Error("<Gauge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set min(value) {
    		throw new Error("<Gauge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<Gauge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<Gauge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get main_gauge_stops() {
    		throw new Error("<Gauge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set main_gauge_stops(value) {
    		throw new Error("<Gauge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Gauge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Gauge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get average() {
    		throw new Error("<Gauge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set average(value) {
    		throw new Error("<Gauge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get high() {
    		throw new Error("<Gauge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set high(value) {
    		throw new Error("<Gauge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get low() {
    		throw new Error("<Gauge>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set low(value) {
    		throw new Error("<Gauge>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }

    /* src/components/ui/LoadingAnimation.svelte generated by Svelte v3.40.2 */
    const file$3 = "src/components/ui/LoadingAnimation.svelte";

    // (58:1) {#if text}
    function create_if_block$3(ctx) {
    	let p;
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(/*text*/ ctx[0]);
    			this.h();
    		},
    		l: function claim(nodes) {
    			p = claim_element(nodes, "P", { class: true });
    			var p_nodes = children(p);
    			t = claim_text(p_nodes, /*text*/ ctx[0]);
    			p_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(p, "class", "svelte-1ly2cp9");
    			add_location(p, file$3, 57, 11, 1125);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, p, anchor);
    			append_hydration_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*text*/ 1) set_data_dev(t, /*text*/ ctx[0]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(58:1) {#if text}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$3(ctx) {
    	let div;
    	let span1;
    	let span0;
    	let t;
    	let div_transition;
    	let current;
    	let if_block = /*text*/ ctx[0] && create_if_block$3(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			span1 = element("span");
    			span0 = element("span");
    			t = space();
    			if (if_block) if_block.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			span1 = claim_element(div_nodes, "SPAN", { class: true });
    			var span1_nodes = children(span1);
    			span0 = claim_element(span1_nodes, "SPAN", { class: true });
    			children(span0).forEach(detach_dev);
    			span1_nodes.forEach(detach_dev);
    			t = claim_space(div_nodes);
    			if (if_block) if_block.l(div_nodes);
    			div_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(span0, "class", "spinner__animation svelte-1ly2cp9");
    			add_location(span0, file$3, 56, 33, 1070);
    			attr_dev(span1, "class", "spinner__wrapper svelte-1ly2cp9");
    			add_location(span1, file$3, 56, 1, 1038);
    			attr_dev(div, "class", "spinner svelte-1ly2cp9");
    			add_location(div, file$3, 55, 0, 979);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, div, anchor);
    			append_hydration_dev(div, span1);
    			append_hydration_dev(span1, span0);
    			append_hydration_dev(div, t);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*text*/ ctx[0]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$3(ctx);
    					if_block.c();
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 250 }, true);
    				div_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, { duration: 250 }, false);
    			div_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (if_block) if_block.d();
    			if (detaching && div_transition) div_transition.end();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LoadingAnimation', slots, []);
    	let { text = "" } = $$props;
    	const writable_props = ['text'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LoadingAnimation> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    	};

    	$$self.$capture_state = () => ({ fade, text });

    	$$self.$inject_state = $$props => {
    		if ('text' in $$props) $$invalidate(0, text = $$props.text);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [text];
    }

    class LoadingAnimation extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { text: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LoadingAnimation",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get text() {
    		throw new Error("<LoadingAnimation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<LoadingAnimation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /**
     *	Util function that takes a string and makes it a nice, slugified version. To do this, we:
    	- split the words, then join on hyphens
    	- make it lower case
    	- pull punctuation
     * 
     * @param  {...any} words A string with as many words as you want.
     * @returns {string} Slugified version of `words`
     */
    function slugify(...words) {
    	return words
    		.join("-")
    		.toLowerCase()
    		.replace(/[,.]+/g, "")
    		.replace(/\s+/g, "-")
    		.replace(/^-|-$/, "");
    }

    const contextKey = "water-dials-context";

    /* src/components/Dial.svelte generated by Svelte v3.40.2 */
    const file$2 = "src/components/Dial.svelte";

    // (149:1) {#if !value}
    function create_if_block$2(ctx) {
    	let loadinganimation;
    	let current;

    	loadinganimation = new LoadingAnimation({
    			props: {
    				text: /*$fetchingData*/ ctx[16]
    				? "Refreshing data"
    				: "Data not available"
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(loadinganimation.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(loadinganimation.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loadinganimation, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const loadinganimation_changes = {};

    			if (dirty & /*$fetchingData*/ 65536) loadinganimation_changes.text = /*$fetchingData*/ ctx[16]
    			? "Refreshing data"
    			: "Data not available";

    			loadinganimation.$set(loadinganimation_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loadinganimation.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loadinganimation.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loadinganimation, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(149:1) {#if !value}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let div;
    	let h2;
    	let t0;
    	let t1;
    	let p;
    	let t2;
    	let t3;
    	let charts;
    	let t4;
    	let timestamp;
    	let t5;
    	let span0;
    	let t6;
    	let span0_aria_hidden_value;
    	let t7;
    	let span1;
    	let t8;
    	let t9;
    	let span1_aria_hidden_value;
    	let t10;
    	let cso_1;
    	let t11;
    	let gauge;
    	let t12;
    	let div_class_value;
    	let div_aria_hidden_value;
    	let current;

    	charts = new Charts({
    			props: {
    				uniqueSlug: /*uniqueSlug*/ ctx[14],
    				average: /*average*/ ctx[11],
    				min: /*min*/ ctx[4],
    				max: /*max*/ ctx[5],
    				value: /*value*/ ctx[10],
    				main_dial_stops: /*main_dial_stops*/ ctx[6]
    			},
    			$$inline: true
    		});

    	timestamp = new Timestamp({
    			props: { updated: /*updated*/ ctx[0] },
    			$$inline: true
    		});

    	cso_1 = new CSO$1({
    			props: { cso: /*cso*/ ctx[9] },
    			$$inline: true
    		});

    	gauge = new Gauge({
    			props: {
    				uniqueSlug: /*uniqueSlug*/ ctx[14],
    				average: /*average*/ ctx[11],
    				high: /*high*/ ctx[12],
    				low: /*low*/ ctx[13],
    				min: /*min*/ ctx[4],
    				max: /*max*/ ctx[5],
    				value: /*value*/ ctx[10],
    				main_gauge_stops: /*main_gauge_stops*/ ctx[7]
    			},
    			$$inline: true
    		});

    	let if_block = !/*value*/ ctx[10] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h2 = element("h2");
    			t0 = text(/*name*/ ctx[2]);
    			t1 = space();
    			p = element("p");
    			t2 = text(/*description*/ ctx[3]);
    			t3 = space();
    			create_component(charts.$$.fragment);
    			t4 = space();
    			create_component(timestamp.$$.fragment);
    			t5 = space();
    			span0 = element("span");
    			t6 = text(/*label*/ ctx[15]);
    			t7 = space();
    			span1 = element("span");
    			t8 = text(/*value*/ ctx[10]);
    			t9 = text(" ppb");
    			t10 = space();
    			create_component(cso_1.$$.fragment);
    			t11 = space();
    			create_component(gauge.$$.fragment);
    			t12 = space();
    			if (if_block) if_block.c();
    			this.h();
    		},
    		l: function claim(nodes) {
    			div = claim_element(nodes, "DIV", {
    				id: true,
    				class: true,
    				"aria-hidden": true
    			});

    			var div_nodes = children(div);
    			h2 = claim_element(div_nodes, "H2", { class: true });
    			var h2_nodes = children(h2);
    			t0 = claim_text(h2_nodes, /*name*/ ctx[2]);
    			h2_nodes.forEach(detach_dev);
    			t1 = claim_space(div_nodes);
    			p = claim_element(div_nodes, "P", { class: true });
    			var p_nodes = children(p);
    			t2 = claim_text(p_nodes, /*description*/ ctx[3]);
    			p_nodes.forEach(detach_dev);
    			t3 = claim_space(div_nodes);
    			claim_component(charts.$$.fragment, div_nodes);
    			t4 = claim_space(div_nodes);
    			claim_component(timestamp.$$.fragment, div_nodes);
    			t5 = claim_space(div_nodes);
    			span0 = claim_element(div_nodes, "SPAN", { "aria-hidden": true, class: true });
    			var span0_nodes = children(span0);
    			t6 = claim_text(span0_nodes, /*label*/ ctx[15]);
    			span0_nodes.forEach(detach_dev);
    			t7 = claim_space(div_nodes);
    			span1 = claim_element(div_nodes, "SPAN", { "aria-hidden": true, class: true });
    			var span1_nodes = children(span1);
    			t8 = claim_text(span1_nodes, /*value*/ ctx[10]);
    			t9 = claim_text(span1_nodes, " ppb");
    			span1_nodes.forEach(detach_dev);
    			t10 = claim_space(div_nodes);
    			claim_component(cso_1.$$.fragment, div_nodes);
    			t11 = claim_space(div_nodes);
    			claim_component(gauge.$$.fragment, div_nodes);
    			t12 = claim_space(div_nodes);
    			if (if_block) if_block.l(div_nodes);
    			div_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(h2, "class", "stem svelte-12cf46x");
    			add_location(h2, file$2, 140, 1, 3018);
    			attr_dev(p, "class", "description svelte-12cf46x");
    			add_location(p, file$2, 141, 1, 3048);
    			attr_dev(span0, "aria-hidden", span0_aria_hidden_value = !/*value*/ ctx[10]);
    			attr_dev(span0, "class", "label svelte-12cf46x");
    			toggle_class(span0, "visible", /*value*/ ctx[10]);
    			add_location(span0, file$2, 144, 1, 3188);
    			attr_dev(span1, "aria-hidden", span1_aria_hidden_value = !/*value*/ ctx[10]);
    			attr_dev(span1, "class", "value svelte-12cf46x");
    			toggle_class(span1, "visible", /*value*/ ctx[10]);
    			add_location(span1, file$2, 145, 1, 3267);
    			attr_dev(div, "id", /*uniqueSlug*/ ctx[14]);
    			attr_dev(div, "class", div_class_value = "dial dial--" + /*caution*/ ctx[8] + " svelte-12cf46x");
    			attr_dev(div, "aria-hidden", div_aria_hidden_value = !/*visible*/ ctx[1]);
    			toggle_class(div, "visible", /*visible*/ ctx[1]);
    			add_location(div, file$2, 139, 0, 2929);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, div, anchor);
    			append_hydration_dev(div, h2);
    			append_hydration_dev(h2, t0);
    			append_hydration_dev(div, t1);
    			append_hydration_dev(div, p);
    			append_hydration_dev(p, t2);
    			append_hydration_dev(div, t3);
    			mount_component(charts, div, null);
    			append_hydration_dev(div, t4);
    			mount_component(timestamp, div, null);
    			append_hydration_dev(div, t5);
    			append_hydration_dev(div, span0);
    			append_hydration_dev(span0, t6);
    			append_hydration_dev(div, t7);
    			append_hydration_dev(div, span1);
    			append_hydration_dev(span1, t8);
    			append_hydration_dev(span1, t9);
    			append_hydration_dev(div, t10);
    			mount_component(cso_1, div, null);
    			append_hydration_dev(div, t11);
    			mount_component(gauge, div, null);
    			append_hydration_dev(div, t12);
    			if (if_block) if_block.m(div, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*name*/ 4) set_data_dev(t0, /*name*/ ctx[2]);
    			if (!current || dirty & /*description*/ 8) set_data_dev(t2, /*description*/ ctx[3]);
    			const charts_changes = {};
    			if (dirty & /*uniqueSlug*/ 16384) charts_changes.uniqueSlug = /*uniqueSlug*/ ctx[14];
    			if (dirty & /*average*/ 2048) charts_changes.average = /*average*/ ctx[11];
    			if (dirty & /*min*/ 16) charts_changes.min = /*min*/ ctx[4];
    			if (dirty & /*max*/ 32) charts_changes.max = /*max*/ ctx[5];
    			if (dirty & /*value*/ 1024) charts_changes.value = /*value*/ ctx[10];
    			if (dirty & /*main_dial_stops*/ 64) charts_changes.main_dial_stops = /*main_dial_stops*/ ctx[6];
    			charts.$set(charts_changes);
    			const timestamp_changes = {};
    			if (dirty & /*updated*/ 1) timestamp_changes.updated = /*updated*/ ctx[0];
    			timestamp.$set(timestamp_changes);
    			if (!current || dirty & /*label*/ 32768) set_data_dev(t6, /*label*/ ctx[15]);

    			if (!current || dirty & /*value*/ 1024 && span0_aria_hidden_value !== (span0_aria_hidden_value = !/*value*/ ctx[10])) {
    				attr_dev(span0, "aria-hidden", span0_aria_hidden_value);
    			}

    			if (dirty & /*value*/ 1024) {
    				toggle_class(span0, "visible", /*value*/ ctx[10]);
    			}

    			if (!current || dirty & /*value*/ 1024) set_data_dev(t8, /*value*/ ctx[10]);

    			if (!current || dirty & /*value*/ 1024 && span1_aria_hidden_value !== (span1_aria_hidden_value = !/*value*/ ctx[10])) {
    				attr_dev(span1, "aria-hidden", span1_aria_hidden_value);
    			}

    			if (dirty & /*value*/ 1024) {
    				toggle_class(span1, "visible", /*value*/ ctx[10]);
    			}

    			const cso_1_changes = {};
    			if (dirty & /*cso*/ 512) cso_1_changes.cso = /*cso*/ ctx[9];
    			cso_1.$set(cso_1_changes);
    			const gauge_changes = {};
    			if (dirty & /*uniqueSlug*/ 16384) gauge_changes.uniqueSlug = /*uniqueSlug*/ ctx[14];
    			if (dirty & /*average*/ 2048) gauge_changes.average = /*average*/ ctx[11];
    			if (dirty & /*high*/ 4096) gauge_changes.high = /*high*/ ctx[12];
    			if (dirty & /*low*/ 8192) gauge_changes.low = /*low*/ ctx[13];
    			if (dirty & /*min*/ 16) gauge_changes.min = /*min*/ ctx[4];
    			if (dirty & /*max*/ 32) gauge_changes.max = /*max*/ ctx[5];
    			if (dirty & /*value*/ 1024) gauge_changes.value = /*value*/ ctx[10];
    			if (dirty & /*main_gauge_stops*/ 128) gauge_changes.main_gauge_stops = /*main_gauge_stops*/ ctx[7];
    			gauge.$set(gauge_changes);

    			if (!/*value*/ ctx[10]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*value*/ 1024) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div, null);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (!current || dirty & /*uniqueSlug*/ 16384) {
    				attr_dev(div, "id", /*uniqueSlug*/ ctx[14]);
    			}

    			if (!current || dirty & /*caution*/ 256 && div_class_value !== (div_class_value = "dial dial--" + /*caution*/ ctx[8] + " svelte-12cf46x")) {
    				attr_dev(div, "class", div_class_value);
    			}

    			if (!current || dirty & /*visible*/ 2 && div_aria_hidden_value !== (div_aria_hidden_value = !/*visible*/ ctx[1])) {
    				attr_dev(div, "aria-hidden", div_aria_hidden_value);
    			}

    			if (dirty & /*caution, visible*/ 258) {
    				toggle_class(div, "visible", /*visible*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(charts.$$.fragment, local);
    			transition_in(timestamp.$$.fragment, local);
    			transition_in(cso_1.$$.fragment, local);
    			transition_in(gauge.$$.fragment, local);
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(charts.$$.fragment, local);
    			transition_out(timestamp.$$.fragment, local);
    			transition_out(cso_1.$$.fragment, local);
    			transition_out(gauge.$$.fragment, local);
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(charts);
    			destroy_component(timestamp);
    			destroy_component(cso_1);
    			destroy_component(gauge);
    			if (if_block) if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let label;
    	let $fetchingData;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Dial', slots, []);
    	let { visible } = $$props;
    	let { name = "" } = $$props;
    	let { description = "" } = $$props;
    	let { min = 0 } = $$props;
    	let { max = 100 } = $$props;
    	let { main_dial_stops = 10 } = $$props;
    	let { main_gauge_stops = 5 } = $$props;
    	let { caution } = $$props;
    	let { labels = {} } = $$props;
    	let { cso = "" } = $$props;
    	let { value } = $$props;
    	let { average } = $$props;
    	let { high } = $$props;
    	let { low } = $$props;
    	let { updated = "" } = $$props;
    	let { uniqueSlug = slugify(name) } = $$props;
    	const { fetchingData } = getContext(contextKey);
    	validate_store(fetchingData, 'fetchingData');
    	component_subscribe($$self, fetchingData, value => $$invalidate(16, $fetchingData = value));

    	const writable_props = [
    		'visible',
    		'name',
    		'description',
    		'min',
    		'max',
    		'main_dial_stops',
    		'main_gauge_stops',
    		'caution',
    		'labels',
    		'cso',
    		'value',
    		'average',
    		'high',
    		'low',
    		'updated',
    		'uniqueSlug'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Dial> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('visible' in $$props) $$invalidate(1, visible = $$props.visible);
    		if ('name' in $$props) $$invalidate(2, name = $$props.name);
    		if ('description' in $$props) $$invalidate(3, description = $$props.description);
    		if ('min' in $$props) $$invalidate(4, min = $$props.min);
    		if ('max' in $$props) $$invalidate(5, max = $$props.max);
    		if ('main_dial_stops' in $$props) $$invalidate(6, main_dial_stops = $$props.main_dial_stops);
    		if ('main_gauge_stops' in $$props) $$invalidate(7, main_gauge_stops = $$props.main_gauge_stops);
    		if ('caution' in $$props) $$invalidate(8, caution = $$props.caution);
    		if ('labels' in $$props) $$invalidate(18, labels = $$props.labels);
    		if ('cso' in $$props) $$invalidate(9, cso = $$props.cso);
    		if ('value' in $$props) $$invalidate(10, value = $$props.value);
    		if ('average' in $$props) $$invalidate(11, average = $$props.average);
    		if ('high' in $$props) $$invalidate(12, high = $$props.high);
    		if ('low' in $$props) $$invalidate(13, low = $$props.low);
    		if ('updated' in $$props) $$invalidate(0, updated = $$props.updated);
    		if ('uniqueSlug' in $$props) $$invalidate(14, uniqueSlug = $$props.uniqueSlug);
    	};

    	$$self.$capture_state = () => ({
    		Charts,
    		Timestamp,
    		CSO: CSO$1,
    		Gauge,
    		LoadingAnimation,
    		slugify,
    		getContext,
    		contextKey,
    		format,
    		visible,
    		name,
    		description,
    		min,
    		max,
    		main_dial_stops,
    		main_gauge_stops,
    		caution,
    		labels,
    		cso,
    		value,
    		average,
    		high,
    		low,
    		updated,
    		uniqueSlug,
    		fetchingData,
    		label,
    		$fetchingData
    	});

    	$$self.$inject_state = $$props => {
    		if ('visible' in $$props) $$invalidate(1, visible = $$props.visible);
    		if ('name' in $$props) $$invalidate(2, name = $$props.name);
    		if ('description' in $$props) $$invalidate(3, description = $$props.description);
    		if ('min' in $$props) $$invalidate(4, min = $$props.min);
    		if ('max' in $$props) $$invalidate(5, max = $$props.max);
    		if ('main_dial_stops' in $$props) $$invalidate(6, main_dial_stops = $$props.main_dial_stops);
    		if ('main_gauge_stops' in $$props) $$invalidate(7, main_gauge_stops = $$props.main_gauge_stops);
    		if ('caution' in $$props) $$invalidate(8, caution = $$props.caution);
    		if ('labels' in $$props) $$invalidate(18, labels = $$props.labels);
    		if ('cso' in $$props) $$invalidate(9, cso = $$props.cso);
    		if ('value' in $$props) $$invalidate(10, value = $$props.value);
    		if ('average' in $$props) $$invalidate(11, average = $$props.average);
    		if ('high' in $$props) $$invalidate(12, high = $$props.high);
    		if ('low' in $$props) $$invalidate(13, low = $$props.low);
    		if ('updated' in $$props) $$invalidate(0, updated = $$props.updated);
    		if ('uniqueSlug' in $$props) $$invalidate(14, uniqueSlug = $$props.uniqueSlug);
    		if ('label' in $$props) $$invalidate(15, label = $$props.label);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*labels, caution*/ 262400) {
    			$$invalidate(15, label = labels[caution]);
    		}
    	};

    	$$invalidate(0, updated = "");

    	return [
    		updated,
    		visible,
    		name,
    		description,
    		min,
    		max,
    		main_dial_stops,
    		main_gauge_stops,
    		caution,
    		cso,
    		value,
    		average,
    		high,
    		low,
    		uniqueSlug,
    		label,
    		$fetchingData,
    		fetchingData,
    		labels
    	];
    }

    class Dial extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
    			visible: 1,
    			name: 2,
    			description: 3,
    			min: 4,
    			max: 5,
    			main_dial_stops: 6,
    			main_gauge_stops: 7,
    			caution: 8,
    			labels: 18,
    			cso: 9,
    			value: 10,
    			average: 11,
    			high: 12,
    			low: 13,
    			updated: 0,
    			uniqueSlug: 14
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Dial",
    			options,
    			id: create_fragment$2.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*visible*/ ctx[1] === undefined && !('visible' in props)) {
    			console.warn("<Dial> was created without expected prop 'visible'");
    		}

    		if (/*caution*/ ctx[8] === undefined && !('caution' in props)) {
    			console.warn("<Dial> was created without expected prop 'caution'");
    		}

    		if (/*value*/ ctx[10] === undefined && !('value' in props)) {
    			console.warn("<Dial> was created without expected prop 'value'");
    		}

    		if (/*average*/ ctx[11] === undefined && !('average' in props)) {
    			console.warn("<Dial> was created without expected prop 'average'");
    		}

    		if (/*high*/ ctx[12] === undefined && !('high' in props)) {
    			console.warn("<Dial> was created without expected prop 'high'");
    		}

    		if (/*low*/ ctx[13] === undefined && !('low' in props)) {
    			console.warn("<Dial> was created without expected prop 'low'");
    		}
    	}

    	get visible() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set visible(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get name() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get description() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set description(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get min() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set min(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get max() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set max(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get main_dial_stops() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set main_dial_stops(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get main_gauge_stops() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set main_gauge_stops(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get caution() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set caution(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get labels() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set labels(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get cso() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set cso(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get value() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set value(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get average() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set average(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get high() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set high(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get low() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set low(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get updated() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set updated(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get uniqueSlug() {
    		throw new Error("<Dial>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set uniqueSlug(value) {
    		throw new Error("<Dial>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/ui/InputSelect.svelte generated by Svelte v3.40.2 */

    const file$1 = "src/components/ui/InputSelect.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[0] = list[i].value;
    	child_ctx[4] = list[i].label;
    	return child_ctx;
    }

    // (62:0) {#if label}
    function create_if_block_2(ctx) {
    	let label_1;
    	let t;

    	const block = {
    		c: function create() {
    			label_1 = element("label");
    			t = text(/*label*/ ctx[4]);
    			this.h();
    		},
    		l: function claim(nodes) {
    			label_1 = claim_element(nodes, "LABEL", { for: true, class: true });
    			var label_1_nodes = children(label_1);
    			t = claim_text(label_1_nodes, /*label*/ ctx[4]);
    			label_1_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(label_1, "for", /*id*/ ctx[1]);
    			attr_dev(label_1, "class", "svelte-6cbogz");
    			add_location(label_1, file$1, 61, 11, 1157);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, label_1, anchor);
    			append_hydration_dev(label_1, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*label*/ 16) set_data_dev(t, /*label*/ ctx[4]);

    			if (dirty & /*id*/ 2) {
    				attr_dev(label_1, "for", /*id*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(62:0) {#if label}",
    		ctx
    	});

    	return block;
    }

    // (65:2) {#if showAll}
    function create_if_block_1(ctx) {
    	let option;
    	let t_value = /*showAll*/ ctx[3].label + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			this.h();
    		},
    		l: function claim(nodes) {
    			option = claim_element(nodes, "OPTION", {});
    			var option_nodes = children(option);
    			t = claim_text(option_nodes, t_value);
    			option_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			option.__value = option_value_value = /*showAll*/ ctx[3].value;
    			option.value = option.__value;
    			option.selected = true;
    			add_location(option, file$1, 65, 3, 1291);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, option, anchor);
    			append_hydration_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*showAll*/ 8 && t_value !== (t_value = /*showAll*/ ctx[3].label + "")) set_data_dev(t, t_value);

    			if (dirty & /*showAll*/ 8 && option_value_value !== (option_value_value = /*showAll*/ ctx[3].value)) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(65:2) {#if showAll}",
    		ctx
    	});

    	return block;
    }

    // (69:3) {#if value != "" && label != ""}
    function create_if_block$1(ctx) {
    	let option;
    	let t_value = /*label*/ ctx[4] + "";
    	let t;
    	let option_value_value;

    	const block = {
    		c: function create() {
    			option = element("option");
    			t = text(t_value);
    			this.h();
    		},
    		l: function claim(nodes) {
    			option = claim_element(nodes, "OPTION", {});
    			var option_nodes = children(option);
    			t = claim_text(option_nodes, t_value);
    			option_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			option.__value = option_value_value = /*value*/ ctx[0];
    			option.value = option.__value;
    			add_location(option, file$1, 69, 4, 1441);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, option, anchor);
    			append_hydration_dev(option, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*options*/ 4 && t_value !== (t_value = /*label*/ ctx[4] + "")) set_data_dev(t, t_value);

    			if (dirty & /*options*/ 4 && option_value_value !== (option_value_value = /*value*/ ctx[0])) {
    				prop_dev(option, "__value", option_value_value);
    				option.value = option.__value;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(option);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(69:3) {#if value != \\\"\\\" && label != \\\"\\\"}",
    		ctx
    	});

    	return block;
    }

    // (68:2) {#each options as { value, label }}
    function create_each_block$1(ctx) {
    	let if_block_anchor;
    	let if_block = /*value*/ ctx[0] != "" && /*label*/ ctx[4] != "" && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			if (if_block) if_block.l(nodes);
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_hydration_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (/*value*/ ctx[0] != "" && /*label*/ ctx[4] != "") {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(68:2) {#each options as { value, label }}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let t;
    	let div;
    	let select;
    	let if_block1_anchor;
    	let mounted;
    	let dispose;
    	let if_block0 = /*label*/ ctx[4] && create_if_block_2(ctx);
    	let if_block1 = /*showAll*/ ctx[3] && create_if_block_1(ctx);
    	let each_value = /*options*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t = space();
    			div = element("div");
    			select = element("select");
    			if (if_block1) if_block1.c();
    			if_block1_anchor = empty();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			this.h();
    		},
    		l: function claim(nodes) {
    			if (if_block0) if_block0.l(nodes);
    			t = claim_space(nodes);
    			div = claim_element(nodes, "DIV", { class: true });
    			var div_nodes = children(div);
    			select = claim_element(div_nodes, "SELECT", { class: true, id: true });
    			var select_nodes = children(select);
    			if (if_block1) if_block1.l(select_nodes);
    			if_block1_anchor = empty();

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].l(select_nodes);
    			}

    			select_nodes.forEach(detach_dev);
    			div_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(select, "class", "select__input svelte-6cbogz");
    			attr_dev(select, "id", /*id*/ ctx[1]);
    			if (/*value*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[6].call(select));
    			add_location(select, file$1, 63, 1, 1216);
    			attr_dev(div, "class", "select svelte-6cbogz");
    			add_location(div, file$1, 62, 0, 1194);
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_hydration_dev(target, t, anchor);
    			insert_hydration_dev(target, div, anchor);
    			append_hydration_dev(div, select);
    			if (if_block1) if_block1.m(select, null);
    			append_hydration_dev(select, if_block1_anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(select, null);
    			}

    			select_option(select, /*value*/ ctx[0]);

    			if (!mounted) {
    				dispose = [
    					listen_dev(select, "input", /*input_handler*/ ctx[5], false, false, false),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[6])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*label*/ ctx[4]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2(ctx);
    					if_block0.c();
    					if_block0.m(t.parentNode, t);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (/*showAll*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1(ctx);
    					if_block1.c();
    					if_block1.m(select, if_block1_anchor);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*options*/ 4) {
    				each_value = /*options*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(select, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (dirty & /*id*/ 2) {
    				attr_dev(select, "id", /*id*/ ctx[1]);
    			}

    			if (dirty & /*value, options, showAll*/ 13) {
    				select_option(select, /*value*/ ctx[0]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t);
    			if (detaching) detach_dev(div);
    			if (if_block1) if_block1.d();
    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('InputSelect', slots, []);
    	let { label } = $$props, { id } = $$props;
    	let { value } = $$props;
    	let { options = [] } = $$props;
    	let { showAll } = $$props;
    	const writable_props = ['label', 'id', 'value', 'options', 'showAll'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<InputSelect> was created with unknown prop '${key}'`);
    	});

    	function input_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function select_change_handler() {
    		value = select_value(this);
    		$$invalidate(0, value);
    		$$invalidate(2, options);
    		$$invalidate(3, showAll);
    	}

    	$$self.$$set = $$props => {
    		if ('label' in $$props) $$invalidate(4, label = $$props.label);
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('options' in $$props) $$invalidate(2, options = $$props.options);
    		if ('showAll' in $$props) $$invalidate(3, showAll = $$props.showAll);
    	};

    	$$self.$capture_state = () => ({ label, id, value, options, showAll });

    	$$self.$inject_state = $$props => {
    		if ('label' in $$props) $$invalidate(4, label = $$props.label);
    		if ('id' in $$props) $$invalidate(1, id = $$props.id);
    		if ('value' in $$props) $$invalidate(0, value = $$props.value);
    		if ('options' in $$props) $$invalidate(2, options = $$props.options);
    		if ('showAll' in $$props) $$invalidate(3, showAll = $$props.showAll);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [value, id, options, showAll, label, input_handler, select_change_handler];
    }

    class InputSelect extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
    			label: 4,
    			id: 1,
    			value: 0,
    			options: 2,
    			showAll: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "InputSelect",
    			options,
    			id: create_fragment$1.name
    		});

    		const { ctx } = this.$$;
    		const props = options.props || {};

    		if (/*label*/ ctx[4] === undefined && !('label' in props)) {
    			console.warn("<InputSelect> was created without expected prop 'label'");
    		}

    		if (/*id*/ ctx[1] === undefined && !('id' in props)) {
    			console.warn("<InputSelect> was created without expected prop 'id'");
    		}

    		if (/*value*/ ctx[0] === undefined && !('value' in props)) {
    			console.warn("<InputSelect> was created without expected prop 'value'");
    		}

    		if (/*showAll*/ ctx[3] === undefined && !('showAll' in props)) {
    			console.warn("<InputSelect> was created without expected prop 'showAll'");
    		}
    	}

    	get label() {
    		return this.$$.ctx[4];
    	}

    	set label(label) {
    		this.$$set({ label });
    		flush();
    	}

    	get id() {
    		return this.$$.ctx[1];
    	}

    	set id(id) {
    		this.$$set({ id });
    		flush();
    	}

    	get value() {
    		return this.$$.ctx[0];
    	}

    	set value(value) {
    		this.$$set({ value });
    		flush();
    	}

    	get options() {
    		return this.$$.ctx[2];
    	}

    	set options(options) {
    		this.$$set({ options });
    		flush();
    	}

    	get showAll() {
    		return this.$$.ctx[3];
    	}

    	set showAll(showAll) {
    		this.$$set({ showAll });
    		flush();
    	}
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=}start start and stop notifications for subscriptions
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    /**
     * This creates a boolean store value to let your code monitor viewport width in a convenient way.
     *
     * @param {string} query | The valid css media query conditions you want to observe
     */

    function createMediaStore(query) {
    	// If we are SSRing, the window is not defined. In that case, just return.
    	if (typeof window === "undefined") return;

    	const media = window.matchMedia(query);
    	const { set, subscribe } = writable(media.matches);

    	media.addEventListener("change", e => {
    		set(e.matches);
    	});

    	return { subscribe };
    }

    /* src/App.svelte generated by Svelte v3.40.2 */

    const { Object: Object_1, console: console_1 } = globals;
    const file = "src/App.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i][0];
    	child_ctx[13] = list[i][1];
    	return child_ctx;
    }

    // (292:1) {#if $isMobile}
    function create_if_block(ctx) {
    	let inputselect;
    	let updating_value;
    	let current;

    	function inputselect_value_binding(value) {
    		/*inputselect_value_binding*/ ctx[10](value);
    	}

    	let inputselect_props = {
    		options: /*options*/ ctx[6],
    		showAll: false,
    		label: "Choose a branch"
    	};

    	if (/*visibleBranch*/ ctx[1] !== void 0) {
    		inputselect_props.value = /*visibleBranch*/ ctx[1];
    	}

    	inputselect = new InputSelect({ props: inputselect_props, $$inline: true });
    	binding_callbacks.push(() => bind(inputselect, 'value', inputselect_value_binding));

    	const block = {
    		c: function create() {
    			create_component(inputselect.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(inputselect.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(inputselect, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const inputselect_changes = {};

    			if (!updating_value && dirty & /*visibleBranch*/ 2) {
    				updating_value = true;
    				inputselect_changes.value = /*visibleBranch*/ ctx[1];
    				add_flush_callback(() => updating_value = false);
    			}

    			inputselect.$set(inputselect_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(inputselect.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(inputselect.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(inputselect, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(292:1) {#if $isMobile}",
    		ctx
    	});

    	return block;
    }

    // (300:2) {#each Object.entries(dials) as [id, dial]}
    function create_each_block(ctx) {
    	let dial;
    	let current;

    	const dial_spread_levels = [
    		{
    			visible: /*id*/ ctx[12] === /*visibleBranch*/ ctx[1] || !/*$isMobile*/ ctx[4]
    		},
    		/*dial*/ ctx[13],
    		/*$gaugeData*/ ctx[3][/*id*/ ctx[12]],
    		{ labels: /*labels*/ ctx[9] },
    		{
    			cso: /*csoEvents*/ ctx[2][/*id*/ ctx[12]]
    		}
    	];

    	let dial_props = {};

    	for (let i = 0; i < dial_spread_levels.length; i += 1) {
    		dial_props = assign(dial_props, dial_spread_levels[i]);
    	}

    	dial = new Dial({ props: dial_props, $$inline: true });

    	const block = {
    		c: function create() {
    			create_component(dial.$$.fragment);
    		},
    		l: function claim(nodes) {
    			claim_component(dial.$$.fragment, nodes);
    		},
    		m: function mount(target, anchor) {
    			mount_component(dial, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const dial_changes = (dirty & /*Object, dials, visibleBranch, $isMobile, $gaugeData, labels, csoEvents*/ 543)
    			? get_spread_update(dial_spread_levels, [
    					dirty & /*Object, dials, visibleBranch, $isMobile*/ 19 && {
    						visible: /*id*/ ctx[12] === /*visibleBranch*/ ctx[1] || !/*$isMobile*/ ctx[4]
    					},
    					dirty & /*Object, dials*/ 1 && get_spread_object(/*dial*/ ctx[13]),
    					dirty & /*$gaugeData, Object, dials*/ 9 && get_spread_object(/*$gaugeData*/ ctx[3][/*id*/ ctx[12]]),
    					dirty & /*labels*/ 512 && { labels: /*labels*/ ctx[9] },
    					dirty & /*csoEvents, Object, dials*/ 5 && {
    						cso: /*csoEvents*/ ctx[2][/*id*/ ctx[12]]
    					}
    				])
    			: {};

    			dial.$set(dial_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(dial.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(dial.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(dial, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(300:2) {#each Object.entries(dials) as [id, dial]}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let div1;
    	let t;
    	let div0;
    	let current;
    	let if_block = /*$isMobile*/ ctx[4] && create_if_block(ctx);
    	let each_value = Object.entries(/*dials*/ ctx[0]);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	const out = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			if (if_block) if_block.c();
    			t = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			this.h();
    		},
    		l: function claim(nodes) {
    			div1 = claim_element(nodes, "DIV", { class: true });
    			var div1_nodes = children(div1);
    			if (if_block) if_block.l(div1_nodes);
    			t = claim_space(div1_nodes);
    			div0 = claim_element(div1_nodes, "DIV", { class: true });
    			var div0_nodes = children(div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].l(div0_nodes);
    			}

    			div0_nodes.forEach(detach_dev);
    			div1_nodes.forEach(detach_dev);
    			this.h();
    		},
    		h: function hydrate() {
    			attr_dev(div0, "class", "dials svelte-1gwki3z");
    			toggle_class(div0, "dials--grid", !/*$isMobile*/ ctx[4]);
    			add_location(div0, file, 298, 1, 7643);
    			attr_dev(div1, "class", "water-quality");
    			add_location(div1, file, 290, 0, 7483);
    		},
    		m: function mount(target, anchor) {
    			insert_hydration_dev(target, div1, anchor);
    			if (if_block) if_block.m(div1, null);
    			append_hydration_dev(div1, t);
    			append_hydration_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].m(div0, null);
    			}

    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*$isMobile*/ ctx[4]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*$isMobile*/ 16) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(div1, t);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}

    			if (dirty & /*Object, dials, visibleBranch, $isMobile, $gaugeData, labels, csoEvents*/ 543) {
    				each_value = Object.entries(/*dials*/ ctx[0]);
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div0, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if (dirty & /*$isMobile*/ 16) {
    				toggle_class(div0, "dials--grid", !/*$isMobile*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block) if_block.d();
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const MAIN_STEM = "https://dvlzjowx88.execute-api.us-west-2.amazonaws.com/h2now/tryptophan/main-stem/1";
    const NORTH_AND_SOUTH = "https://dvlzjowx88.execute-api.us-west-2.amazonaws.com/h2now/tryptophan/north-south/1";
    const CSO = "https://dvlzjowx88.execute-api.us-west-2.amazonaws.com/h2now/all-branches/cso-event/1";

    function getCaution(branch, value, csoEvents) {
    	// Start with CSO. If a date is found, then return high caution no matter what
    	if (csoEvents[branch]) return "high";

    	// An object of arrays, in order. Starting from good, and working up the severity scale.
    	// Each element is a pair of caution keyword and max value
    	let breaks = {
    		main: [["good", 6], ["low", 8]],
    		south: [["good", 28], ["low", 38]],
    		north: [["good", 33], ["low", 54]]
    	};

    	for (let [caution, max] of breaks[branch]) {
    		if (value <= max) return caution;
    	}

    	return "high";
    }

    function instance($$self, $$props, $$invalidate) {
    	let $fetchingData;
    	let $gaugeData;
    	let $isMobile;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	let { dials = [] } = $$props;
    	let gaugeData = writable({ main: {}, north: {}, south: {} });
    	validate_store(gaugeData, 'gaugeData');
    	component_subscribe($$self, gaugeData, value => $$invalidate(3, $gaugeData = value));
    	let visibleBranch;

    	let options = Object.keys(dials).map(key => {
    		const { name } = dials[key];
    		return { label: name, value: key };
    	});

    	// A lookup of CSO dates
    	let csoEvents = {};

    	const isMobile = createMediaStore("(max-width:1023px)");
    	validate_store(isMobile, 'isMobile');
    	component_subscribe($$self, isMobile, value => $$invalidate(4, $isMobile = value));
    	let fetchingData = writable(false);
    	validate_store(fetchingData, 'fetchingData');
    	component_subscribe($$self, fetchingData, value => $$invalidate(11, $fetchingData = value));

    	let labels = {
    		good: "Good",
    		low: "Low caution",
    		high: "High caution"
    	};

    	setContext(contextKey, { fetchingData });

    	/*
    	"main": {
    	"value": 55,
    	"average": 21,
    	"high": 90,
    	"low": 10,
    	"caution": "low",
    	"updated": "2021-07-25T10:33:36.743"
    }
    */
    	onMount(async () => {
    		set_store_value(fetchingData, $fetchingData = true, $fetchingData);

    		// Do the main
    		$$invalidate(2, csoEvents = await fetch(CSO).then(r => r.json()).then(data => {
    			const tagsList = data?.data?.dataModel?.tagsList;

    			if (tagsList) {
    				const today = new Date();

    				return tagsList.reduce(
    					(acc, cur) => {
    						const { title, valueDate } = cur;

    						if (title.toLowerCase().includes("downstream")) {
    							try {
    								let csoDate = new Date(valueDate);

    								// If the time of the last CSO was less than 48 hours ago, store the date
    								acc.south = (today - csoDate) / 1000 / 60 / 60 > 48
    								? ""
    								: new Date(valueDate);
    							} catch(e) {
    								// This is not a valid date. Ignore it.
    								acc.south = "";
    							}
    						} else if (title.toLowerCase().includes("upstream")) {
    							try {
    								let csoDate = new Date(valueDate);

    								// If the time of the last CSO was less than 72 hours ago, store the date
    								acc.north = (today - csoDate) / 1000 / 60 / 60 > 72
    								? ""
    								: new Date(valueDate);
    							} catch(e) {
    								// This is not a valid date. Ignore it.
    								acc.north = "";
    							}
    						} else if (title.toLowerCase().includes("ms")) {
    							try {
    								let csoDate = new Date(valueDate);

    								// If the time of the last CSO was less than 24 hours ago, store the date
    								acc.main = (today - csoDate) / 1000 / 60 / 60 > 24
    								? ""
    								: new Date(valueDate);
    							} catch(e) {
    								// This is not a valid date. Ignore it.
    								acc.main = "";
    							}
    						}

    						return acc;
    					},
    					{}
    				);
    			}
    		}).catch(console.error));

    		Promise.all([
    			fetch(MAIN_STEM).then(r => r.json()).then(data => {
    				let tagsList = data?.data?.dataModel?.tagsList;

    				if (tagsList) {
    					for (let tag of tagsList) {
    						const { title, value } = tag;

    						switch (title) {
    							case "Last Hour Average":
    								if (value) {
    									set_store_value(gaugeData, $gaugeData.main.value = value, $gaugeData);
    									set_store_value(gaugeData, $gaugeData.main.caution = getCaution("main", value, csoEvents), $gaugeData);
    								}
    								break;
    							case "Last Month Average":
    								if (value) set_store_value(gaugeData, $gaugeData.main.average = value, $gaugeData);
    								break;
    							case "Last Month Maximum":
    								if (value) set_store_value(gaugeData, $gaugeData.main.high = value, $gaugeData);
    								break;
    							case "Last Month Minimum":
    								if (value) set_store_value(gaugeData, $gaugeData.main.low = value, $gaugeData);
    								break;
    						}
    					}
    				}
    			}).catch(console.error),
    			// Also do the NORTH/SOUTH
    			fetch(NORTH_AND_SOUTH).then(r => r.json()).then(data => {
    				let tagsList = data?.data?.dataModel?.tagsList;

    				if (tagsList) {
    					for (let tag of tagsList) {
    						const { title, value } = tag;

    						switch (title) {
    							case "NB Last Hour Average":
    								if (value) {
    									set_store_value(gaugeData, $gaugeData.north.value = value, $gaugeData);
    									set_store_value(gaugeData, $gaugeData.north.caution = getCaution("north", value, csoEvents), $gaugeData);
    								}
    								break;
    							case "NB Last Month Average":
    								if (value) set_store_value(gaugeData, $gaugeData.north.average = value, $gaugeData);
    								break;
    							case "NB Last Month Maximum":
    								if (value) set_store_value(gaugeData, $gaugeData.north.high = value, $gaugeData);
    								break;
    							case "NB Last Month Minimum":
    								if (value) set_store_value(gaugeData, $gaugeData.north.low = value, $gaugeData);
    								break;
    							case "SB Last Hour Average":
    								if (value) {
    									set_store_value(gaugeData, $gaugeData.south.value = value, $gaugeData);
    									set_store_value(gaugeData, $gaugeData.south.caution = getCaution("south", value, csoEvents), $gaugeData);
    								}
    								break;
    							case "SB Last Month Average":
    								if (value) set_store_value(gaugeData, $gaugeData.south.average = value, $gaugeData);
    								break;
    							case "SB Last Month Maximum":
    								if (value) set_store_value(gaugeData, $gaugeData.south.high = value, $gaugeData);
    								break;
    							case "SB Last Month Minimum":
    								if (value) set_store_value(gaugeData, $gaugeData.south.low = value, $gaugeData);
    								break;
    						}
    					}
    				}
    			}).catch(console.error)
    		]);

    		set_store_value(fetchingData, $fetchingData = false, $fetchingData);
    	});

    	const writable_props = ['dials'];

    	Object_1.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	function inputselect_value_binding(value) {
    		visibleBranch = value;
    		$$invalidate(1, visibleBranch);
    	}

    	$$self.$$set = $$props => {
    		if ('dials' in $$props) $$invalidate(0, dials = $$props.dials);
    	};

    	$$self.$capture_state = () => ({
    		Dial,
    		InputSelect,
    		createMediaStore,
    		slugify,
    		writable,
    		onMount,
    		setContext,
    		contextKey,
    		dials,
    		gaugeData,
    		visibleBranch,
    		options,
    		csoEvents,
    		isMobile,
    		fetchingData,
    		MAIN_STEM,
    		NORTH_AND_SOUTH,
    		CSO,
    		labels,
    		getCaution,
    		$fetchingData,
    		$gaugeData,
    		$isMobile
    	});

    	$$self.$inject_state = $$props => {
    		if ('dials' in $$props) $$invalidate(0, dials = $$props.dials);
    		if ('gaugeData' in $$props) $$invalidate(5, gaugeData = $$props.gaugeData);
    		if ('visibleBranch' in $$props) $$invalidate(1, visibleBranch = $$props.visibleBranch);
    		if ('options' in $$props) $$invalidate(6, options = $$props.options);
    		if ('csoEvents' in $$props) $$invalidate(2, csoEvents = $$props.csoEvents);
    		if ('fetchingData' in $$props) $$invalidate(8, fetchingData = $$props.fetchingData);
    		if ('labels' in $$props) $$invalidate(9, labels = $$props.labels);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		dials,
    		visibleBranch,
    		csoEvents,
    		$gaugeData,
    		$isMobile,
    		gaugeData,
    		options,
    		isMobile,
    		fetchingData,
    		labels,
    		inputselect_value_binding
    	];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, { dials: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}

    	get dials() {
    		throw new Error("<App>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set dials(value) {
    		throw new Error("<App>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    const SELECTOR = "#dials";

    const target = document.querySelector(SELECTOR);

    if (target) {
    	const data = document.querySelector(`${SELECTOR}-config`).innerText || {};
    	new App({
    		hydrate: true,
    		target: target,
    		props: JSON.parse(data),
    	});
    }
    var app$1 = app;

    return app$1;

}());
//# sourceMappingURL=dials.min.js.map
